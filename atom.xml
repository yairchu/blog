<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title></title>
    <link href="https://yairchu.github.io//atom.xml" rel="self" type="application/rss+xml" />
  <updated>2020-12-22T11:23:SZ</updated>
  <author>
      <name></name>
  </author>
  <id>https://yairchu.github.io//</id>

  <entry>
      <title>Silly Haskell code formatting is prevalent</title>
      <link href="https://yairchu.github.io/posts/silly-haskell-formatting"/>
      <id>https://yairchu.github.io/posts/silly-haskell-formatting</id>
      <updated>2020-12-21T00:00:SZ</updated>
      <category term="code"/>
      <category term="haskell"/>
      <category term="formatting"/>
      <summary>The sore state of formatting in Haskell</summary>
      <content type="html"><![CDATA[<p>Haskell code in the wild could typically have type signatures formatted like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>sortByM</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="ot">    ::</span> <span class="dt">Monad</span> m</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> m <span class="dt">Bool</span>)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>    <span class="ot">-&gt;</span> [a]</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>    <span class="ot">-&gt;</span> m [a]</span></code></pre></div>
<p>From now on I will call this "silly formatting", to contrast with the proper way to split the same type signature to multiple lines:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ot">sortByM ::</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>    <span class="dt">Monad</span> m <span class="ot">=&gt;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>    (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> m <span class="dt">Bool</span>) <span class="ot">-&gt;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>    [a] <span class="ot">-&gt;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>    m [a]</span></code></pre></div>
<p>With proper formatting the context and parameters take whole lines. We could easily tell which part is the context, which are parameters, and which is the function output.</p>
<p>Had we wanted to add or remove parameters or the context, with silly formatting we would need to make edits from the middle of one line to the middle of another. If you are interested in collaboration, silly formatting will hit you with spurious merge conflicts!</p>
<p>What would be the silly way to format function bodies? Here:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>sortByM _         []     <span class="ot">=</span> <span class="fu">pure</span> []</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>sortByM predicate (x<span class="op">:</span>xs) <span class="ot">=</span> partitionM (predicate x) xs <span class="op">&gt;&gt;=</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>                           \(post, pre) <span class="ot">-&gt;</span> sortByM predicate pre <span class="op">&lt;&gt;</span> ((x <span class="op">:</span>) <span class="op">&lt;$&gt;</span> sortByM predicate post)</span></code></pre></div>
<p>Note that to read this snippet you may have needed scroll horizontally - silly, isn't it?</p>
<p>Let's imagine that we wanted to rename <code>predicate</code> to <code>pred</code> or to <code>p</code>. With silly formatting we would also need to modify all of the lines in the function body! That's more work and yet again more work due to unnecessary merge conflicts!</p>
<p>But there's more: silly formatting is difficult to read! Subjectively it's much easier to get used to scanning the text aligned to the left, rather than different silly alignment every time, often far to the right side of the screen or beyond!</p>
<p>If we sacrifice the fancy custom alignments and just indent blocks with simple and consistent 4 spaces, it may cost us an extra line of code but the benefit in easy maintainability and readabilty is worth it in my opinion:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>sortByM _ [] <span class="ot">=</span> <span class="fu">pure</span> []</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>sortByM predicate (x<span class="op">:</span>xs) <span class="ot">=</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>    partitionM (predicate x) xs <span class="op">&gt;&gt;=</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>    \(post, pre) <span class="ot">-&gt;</span> sortByM predicate pre <span class="op">&lt;&gt;</span> ((x <span class="op">:</span>) <span class="op">&lt;$&gt;</span> sortByM predicate post)</span></code></pre></div>
<h2 id="what-drove-me-to-write-this-post">What drove me to write this post</h2>
<p>The Haskell experience has recently gotten much better with <a href="https://github.com/haskell/haskell-language-server">haskell-language-server</a> and its VS Code integration.</p>
<p>The remaining aspect where my Haskell experience was lacking in comparison to C++ was auto-formatting, where I enjoy letting <code>clang-format</code> auto-format my code. I was looking to see what formatting tools exist for Haskell, and discovered that while several tools exist, none fit my taste, and some of these tools were disqualified on the grounds of applying silly formatting.</p>
<p>Among the differenct formatting tools, I'd like to praise <a href="https://github.com/tweag/ormolu"><code>ormolu</code></a> (and <code>fourmolu</code>) for applying more sensible formatting than others.</p>
<h2 id="notes">Notes</h2>
<ul>
<li>GHC's source code has a mixture of styles, with higher prevalence for silly style.</li>
<li>The short type signature of <code>sortByM</code> may typically not be split over several lines. I used it as a simple example to keep the post short.</li>
<li>Discussions: <img src="/images/reddit.svg" alt="reddit" style="width: 20px; display: inline;"/> <a href="https://www.reddit.com/r/haskell/comments/khqs1f/silly_haskell_code_formatting_is_prevalent/">r/haskell</a> mostly thought that this post is the one being silly, and in <img src="/images/twitter-logo.png" alt="twitter" style="width: 20px; display: inline;"/> <a href="https://twitter.com/yairchu/status/1341078315155730432">Twitter</a> the sentiment was more positive :)</li>
<li><a href="https://pixabay.com/illustrations/pokemon-monster-creature-pink-ugly-4784546/">Image</a> by <a href="https://pixabay.com/users/lillycantabile-8561101/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4784546">LillyCantabile</a> from Pixabay</li>
</ul>
<h2 id="appendix">Appendix</h2>
<h3 id="an-alternative-implementation-of-sortbym">An alternative implementation of sortByM</h3>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ot">sortByM ::</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> m <span class="dt">Bool</span>) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> m [a]</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>sortByM p <span class="ot">=</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>    \<span class="kw">case</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>    [] <span class="ot">-&gt;</span> <span class="fu">pure</span> []</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>    (x<span class="op">:</span>xs) <span class="ot">-&gt;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>        partitionM (p x) xs</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>        <span class="op">&gt;&gt;=</span> both (sortByM p)</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>        <span class="op">&lt;&amp;&gt;</span> \(post, pre) <span class="ot">-&gt;</span> pre <span class="op">&lt;&gt;</span> (x <span class="op">:</span> post)</span></code></pre></div>
<p><code>\case</code> lets us avoid a repetition of the name <code>sortByM</code>. Had we wanted to rename it, we'd touch less lines of code. Personally I see this as a benefit!</p>]]></content>
  </entry>
  <entry>
      <title>Intercepting system calls to fix broken software</title>
      <link href="https://yairchu.github.io/posts/intercept-to-fix"/>
      <id>https://yairchu.github.io/posts/intercept-to-fix</id>
      <updated>2020-12-10T00:00:SZ</updated>
      <category term="code"/>
      <category term="c"/>
      <category term="macos"/>
      <category term="low-level"/>
      <summary>Using DYLD_INSERT_LIBRARIES to intercept system calls in macOS</summary>
      <content type="html"><![CDATA[<p>Apple sure like to change things, so when my new computer shipped with the new macOS 11.0, some things didn't work - specifically the Haskell compiler, GHC, failed linking my programs with OpenGL and other system libraries.</p>
<p><a href="https://gitlab.haskell.org/ghc/ghc/-/issues/18446">The problem</a> is already fixed in the GHC git repository, and I could try building it, but that might send me on new adventures due to more new-version behaviours, so instead I looked into working around the problem by making macOS 11 behave like macOS 10 did in the way that GHC expects!</p>
<h3 id="short-problem-description">Short problem description</h3>
<p>When linking with OpenGL, GHC verifies that the file <code>/System/Library/Frameworks/OpenGL.framework/OpenGL</code> exists, but it no longer does!</p>
<p>We can't add the file there (not even with <code>sudo</code>) because macOS's <code>/System</code> folder is special.</p>
<h3 id="solution">Solution</h3>
<p>We can trick GHC to believe that the file exist, and then everything would work!</p>
<p>This can be done by hijacking its calls to the <a href="https://en.wikipedia.org/wiki/Stat_(system_call)"><code>stat</code></a> system call and returning fake results.</p>
<p>MacOS lets us inject additional code into programs using the <code>DYLD_INSERT_LIBRARIES</code> environment variable, and it also supports special pragmas to tell it to replace library functions (aka "interpose" or "hook").</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="dt">int</span> my_stat (<span class="dt">const</span> <span class="dt">char</span>* <span class="dt">restrict</span> path, <span class="kw">struct</span> stat* <span class="dt">restrict</span> buf)</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>{</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    <span class="cf">if</span> (STARTS_WITH (<span class="st">&quot;/System/Library/Frameworks/&quot;</span>, path))</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>    {</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>        <span class="co">// Pretend that the file exists</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>        <span class="cf">return</span> <span class="dv">0</span>;</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>    }</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>    <span class="cf">return</span> stat (path, buf);</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>}</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>DYLD_INTERPOSE (my_stat, stat)</span></code></pre></div>
<p>The above injected code tricks GHC to believe that any file inside <code>/System/Library/Frameworks/</code> exists, and that makes it work!</p>
<p>To work around the problem when executing <code>ghc</code> from a build system, it takes a bit more work to make sure that the injection propagates to it, but my complete solution isn't too long, see: <a href="https://github.com/yairchu/macos11-haskell-workaround/">github.com/yairchu/macos11-haskell-workaround</a></p>
<ul>
<li><img src="/images/reddit.svg" alt="reddit" style="width: 20px; display: inline;"/> <a href="https://www.reddit.com/r/haskell/comments/k9r2cy/workaround_for_haskell_woes_on_macos_11_big_sur/">r/haskell discussion</a> on this work-around</li>
<li>I want to get this workaround into the Haskell build tool <code>stack</code>, if you want that too then please share your opinion on <a href="https://github.com/commercialhaskell/stack/issues/5456">the issue</a>!</li>
<li>FYI: The Linux equivalent of <code>DYLD_INSERT_LIBRARIES</code> is called <a href="https://tbrindus.ca/correct-ld-preload-hooking-libc/"><code>LD_PRELOAD</code></a>, and it can do similar things on Linux.</li>
<li>Image by <a href="https://pixabay.com/illustrations/vaccine-syringe-antidote-cure-3314164/">LillyCantible</a> from PixaBay.</li>
</ul>]]></content>
  </entry>
  <entry>
      <title>Trying to create Syntax Optics</title>
      <link href="https://yairchu.github.io/posts/attempting-syntax-optics"/>
      <id>https://yairchu.github.io/posts/attempting-syntax-optics</id>
      <updated>2020-11-19T00:00:SZ</updated>
      <category term="code"/>
      <category term="declarative"/>
      <category term="haskell"/>
      <category term="optics"/>
      <category term="parsing"/>
      <summary>Declarative parsing and pretty printing with error reporting</summary>
      <content type="html"><![CDATA[<p>The journey to create combinators for parsing and pretty-pretting continues!</p>
<p>This post (along with the new <a href="https://github.com/yairchu/syntax-optics/"><code>syntax-optics</code> repo</a>) combines two previous efforts:</p>
<ul>
<li><a href="/posts/codecs-as-prisms-asts">"Elegant AST Parsing and Building with Prisms"</a> declared <code>Prism</code>s to parse and print ASTs, but lacking descriptive errors when the parsing fails</li>
<li><a href="/posts/optics-with-error-reporting">"Basic error reporting for optics"</a> declared new <code>lens</code>-compatible optics that add error reporting to parse errors</li>
</ul>
<p>The resulting combinators let us nicely declare syntax:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Expr</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>    <span class="ot">=</span> <span class="dt">Lit</span> <span class="dt">Int</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">Add</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">Mul</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>    <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>makePrisms &#39;<span class="dt">&#39;Expr</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a><span class="ot">expr ::</span> <span class="dt">VerbosePrism&#39;</span> <span class="dt">String</span> <span class="dt">String</span> <span class="dt">Expr</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>expr <span class="ot">=</span> tokens <span class="op">.</span> takeExpr <span class="op">.</span> endOfTokens</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a><span class="ot">takeExpr ::</span> <span class="dt">VerbosePrism&#39;</span> <span class="dt">String</span> [<span class="dt">String</span>] (<span class="dt">Expr</span>, [<span class="dt">String</span>])</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>takeExpr <span class="ot">=</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a>    infixOpLeftRecursion p <span class="st">&quot;+&quot;</span> _Add <span class="op">$</span>           <span class="co">-- Additions of</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>    infixOpLeftRecursion p <span class="st">&quot;*&quot;</span> _Mul <span class="op">$</span>           <span class="co">-- multiplications of</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>    tryMatchAtom p (prismFallback _Lit) _Show <span class="op">$</span> <span class="co">-- literals or</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a>    parens takeExpr                             <span class="co">-- expressions in parens</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true"></a>        p <span class="ot">=</span> <span class="dt">Proxy</span> <span class="op">@</span><span class="dt">String</span></span></code></pre></div>
<p><code>expr</code> can be used to both pretty-print and to parse:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="op">&gt;</span> expr <span class="op">#</span> (<span class="dt">Lit</span> <span class="dv">1</span> <span class="ot">`Mul`</span> (<span class="dt">Lit</span> <span class="dv">2</span> <span class="ot">`Add`</span> <span class="dt">Lit</span> <span class="dv">3</span>)) <span class="ot">`Add`</span> <span class="dt">Lit</span> <span class="dv">4</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="st">&quot;1 * (2 + 3) + 4&quot;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="op">&gt;</span> <span class="st">&quot;1 * (2 + 3) + 4&quot;</span> <span class="op">^?</span> expr</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="dt">Just</span> (<span class="dt">Add</span> (<span class="dt">Mul</span> (<span class="dt">Lit</span> <span class="dv">1</span>) (<span class="dt">Add</span> (<span class="dt">Lit</span> <span class="dv">2</span>) (<span class="dt">Lit</span> <span class="dv">3</span>))) (<span class="dt">Lit</span> <span class="dv">4</span>))</span></code></pre></div>
<p>Now, to also get the syntax errors when parsing, we can use the new <code>^??</code> operator rather than <code>lens</code>'s <code>^?</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="op">&gt;</span> <span class="st">&quot;2 + 3 * * 5&quot;</span> <span class="op">^??</span> expr</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="dt">Left</span> <span class="st">&quot;Unexpected \&quot;*\&quot;&quot;</span></span></code></pre></div>
<h2 id="still-lacking-in-the-library">Still lacking in the library</h2>
<ul>
<li>The errors from <code>syntax-optics</code> do not currently report source-code locations of syntax errors.</li>
<li>An <code>AVerbosePrism</code> type synonym, similar in spirit to <code>ALens</code> and <code>APrism</code>, is currently missing. With it the library would not need <code>RankNTypes</code> nor <code>Proxy</code> parameters which it currently requires (<code>p</code> in the example in this post).</li>
</ul>
<p>I've tried to define <code>AVerbosePrism</code> but haven't succeeded so far. Help and advice from <code>lens</code> wizards would be very appreciated!</p>
<h2 id="notes">Notes</h2>
<ul>
<li>Title image by <a href="https://commons.wikimedia.org/wiki/File:Reflex_camera_simple_labels.svg">Jean François WITZ</a>.</li>
</ul>]]></content>
  </entry>
  <entry>
      <title>Simple Dev/Release Workflows</title>
      <link href="https://yairchu.github.io/posts/simple-dev-flows"/>
      <id>https://yairchu.github.io/posts/simple-dev-flows</id>
      <updated>2020-11-05T00:00:SZ</updated>
      <category term="code"/>
      <category term="git"/>
      <category term="teamwork"/>
      <summary>Two simple development models</summary>
      <content type="html"><![CDATA[<p>In this post I'll introduce very simple software development workflows, each suitable for different needs:</p>
<ul>
<li>The "Red Light, Green Light Flow", suitable for occasional releases</li>
<li>The "Light Flow", suitable for regular releases (weekly/monthly)</li>
<li>I will also compare them to <a href="https://guides.github.com/introduction/flow/">the GitHub Flow</a>, <a href="https://nvie.com/posts/a-successful-git-branching-model/">"GitFlow"</a>, and <a href="https://trunkbaseddevelopment.com/">"Trunk Based Development"</a>.</li>
</ul>
<h2 id="the-red-light-green-light--feature-freeze-flow">The Red Light, Green Light / Feature Freeze Flow</h2>
<p><img src="/images/rlgl-flow.svg" alt="RLGL State Machine" /></p>
<p>Like in the famous children's game of "Red Light, Green Light" (aka "Statues", and <a href="https://en.wikipedia.org/wiki/Statues_(game)">many other names</a>), development switches between two modes:</p>
<ul>
<li>Free dev. New features are developed freely and big changes may happen to the codebase, often introducing bugs.</li>
<li>Preparing to ship, aka <a href="https://en.wikipedia.org/wiki/Freeze_(software_engineering)">"code freeze"</a>. At this stage bugs and problems are fixed.</li>
</ul>
<p>When preparing releases and not deliberately choosing a workflow, work tends to naturally develop into the RLGL flow. When you find that there are too many bugs, it may come naturally to decide: "let's focus on fixing bugs now and keep the new features for later".</p>
<p><em>The mutex analogy: A freeze is mutually exclusive with adding features to <code>main</code>.</em></p>
<h3 id="challenges-with-statefulness-and-concurrency">Challenges with statefulness and concurrency</h3>
<p>If you ever heard an <em>"Oh! I wasn't aware that we're in a feature freeze"</em>, that's because communication is tricky. Someone may have missed a meeting, or announcements in the group chat may have been drowned by other messages. If you find coordinating the state to be tricky, it may make sense to use a flow that formalizes the modes of development in the structure of the git branches.</p>
<h2 id="the-light-flow">The Light Flow</h2>
<p><img src="/images/light-flow.svg" alt="Light Flow Commit Tree" /></p>
<p>The different types of branches and commits in the diagram:</p>
<ul>
<li>The main branch in the middle is colored in yellow</li>
<li>Feature branches are colored purple. They are surrounded by dashes to signify that they are temporary: some might be aborted, others will be rebased and will ultimately become normal commits in <code>main</code></li>
<li>Release branches are colored in green. They end up with a release and are merged into <code>main</code></li>
<li>Releases, given <code>git tag</code>s, are displayed as rectangular nodes</li>
</ul>
<h3 id="how-to-light-flow">How to Light Flow</h3>
<ul>
<li>Developers can freely add new features to <code>main</code> at all times!</li>
<li>A bug tracker is used to keep track of tasks
<ul>
<li>A list of known bugs that shouldn't be in a release is maintained</li>
<li>A list of fresh and not yet well tested features in the <code>main</code> branch is also maintained</li>
<li>For each bug or feature, the commit which introduced it is identified in its issue</li>
<li>Bugfix commits should mention which bugs were fixed</li>
</ul></li>
<li>Preparing a release
<ul>
<li>If the <code>main</code> branch happens to be in a good bug-free state, then we're in luck, and just <code>git tag</code> it as a release candidate!</li>
<li>If we still have bugs to fix for the release, then we open a release branch</li>
</ul></li>
</ul>
<h3 id="using-a-release-branch">Using a release branch</h3>
<p>When the <code>main</code> branch is not suitable for release as is, the person in charge of the release will create a branch from a selected commit in <code>main</code>, calling it <code>fixes-VERSION</code>, or informally "the current release branch".</p>
<ul>
<li>Bug fixes are added to the release branch</li>
<li>Once the known bugs appear to be fixed, tag and build a release candidate</li>
<li>If new issues are discovered in the RC, go back to the previous stage</li>
<li>When the RC is good: ship the release, tag it, and merge the branch back into <code>main</code>. Merge it - don't rebase, so that the actual release is in <code>main</code>'s history</li>
</ul>
<h3 id="how-to-choose-a-branching-point-for-the-release-branch">How to choose a branching point for the release branch</h3>
<p>The commit messages and the bug tracker help us "taint" the states in the <code>main</code> branch with existence of various bugs.</p>
<ul>
<li>Unfixed bugs taint <code>main</code> since they were introduced</li>
<li>Bugs that were fixed taint only a specific range of commits</li>
</ul>
<p>A good point to start the release branch is one which is relatively clean, yet also includes valueable features which improve upon the previous release.</p>
<p>If the chosen point doesn't include all the fixes currently available in <code>main</code>, we'll <code>git cherry-pick</code> them into the release branch.</p>
<h3 id="caution-with-reverts-on-the-release-branch">Caution with reverts on the release branch</h3>
<p>Sometimes we may want to <code>git revert</code> a commit only for a release branch. In this case we should keep in mind that if we merge the release branch as is, the revert will propagate into <code>main</code>. If we wish to avoid that, we should remember to un-revert the commit!</p>
<h2 id="how-does-light-flow-compare-to-other-workflows">How does Light Flow compare to other workflows</h2>
<h3 id="the-github-flow">The GitHub Flow</h3>
<p>The <a href="https://guides.github.com/introduction/flow/">GitHub Flow</a> has a <code>main</code> branch and feature branches, without release branches.</p>
<p>Its tools to avoid bugs are code reviews for all changes and rolling back faulty versions. If you can un-deploy faulty versions, which is often possible for web apps, and can put in the time and effort to do good code review, then this flow might work well for you.</p>
<p>If you prefer to avoid faulty releases, and prefer to not extensively code review each and every change, then the Light Flow is probably a better fit.</p>
<h3 id="comparison-to-gitflow">Comparison to GitFlow</h3>
<p><image alt="GitFlow" src="/images/gitflow.png" width="350px" /></p>
<p><em>Note that Vincent Driessen, the creator of GitFlow, <a href="https://nvie.com/posts/a-successful-git-branching-model/">currently recommends</a> most projects to adopt the GitHub Flow instead.</em></p>
<p>The Light flow is a simplified variant of GitFlow. The differences are:</p>
<ul>
<li><code>main</code> is called <code>develop</code></li>
<li>An additional <code>master</code> branch points to the latest release</li>
<li>GitFlow suggests to use explicit merge commits when merging feature branches, while the Light Flow recommends rebases</li>
<li>GitFlow explicitly describes a process for <em>hotfix branches</em>, which branch out of previous releases and add fixes to them. This makes sense for projects which maintain multiple versions. This may happen if new versions of the product are paid upgrades but old version still get bug fixes. For such projects GitFlow is probably a very good choice.</li>
</ul>
<p>The Light Flow's recommendation for rebasing feature branches and omission of hotfix branches puts an emphasis on integrating new developments faster and releasing them from <code>main</code> more often, to avoid accumulating a gap of unreleased and unstable features.</p>
<h3 id="comparison-to-trunk-based-development">Comparison to Trunk Based Development</h3>
<p>The <a href="https://trunkbaseddevelopment.com/">Trunk Based Development</a> may seem similar to the light flow, as the difference is small: It prescribes that release branches <strong>should not</strong> be merged back to <code>main</code>.</p>
<p>Its site refers to the Light Flow by the name <a href="https://trunkbaseddevelopment.com/alternative-branching-models/#mainline">"Mainline"</a> (note that their description predates this post), and it considers it as the "diametrically opposite to Trunk-Based Development", and furthermore, recommends not to use it! But personally I'm not convinced, and I'll demonstrate with a simple example how the small difference between workflow affects things:</p>
<p>Imagine that we decided to revert a commit in a release branch.</p>
<p>The following diagram represents the diff between Light Flow and Trunk based in this scenario, in the form of a bright pink cherry-pick commit and pink arrows denoting merges of release branches back to <code>main</code>:</p>
<p><img src="/images/light-flow-vs-trunk-based.svg" alt="Light Flow vs Trunk Based" /></p>
<p>Doing <code>git log release-2.4..release2.5</code> in this example would list the correct changes list of changes between these releases with the Light Flow, but using Trunk-Based it will be have a misleading result for this log that omits the re-introduction of the reverted change.</p>
<h2 id="does-the-light-flow-work">Does the Light Flow work</h2>
<p><a href="https://pajam.live/"><image alt="pajam!" src="/images/pajam-icon.svg" width="75px" /></a></p>
<p>I wrote this post in order to suggest this model for the development of <a href="https://pajam.live/">Pajam</a> (btw, if you happen to be a musician that wants to jam with their friends remotely, I highly recommend you to give Pajam a try!).</p>
<p>In the future, I will update this section with our results.</p>
<h2 id="notes">Notes</h2>
<ul>
<li>Discussion on <img src="/images/reddit.svg" alt="reddit" style="width: 20px; display: inline;"/> <a href="https://www.reddit.com/r/programming/comments/juja4y/simple_devrelease_workflows/">r/programming</a></li>
<li>Image credits:
<ul>
<li>Title image (merging neutron stars): <a href="https://en.m.wikipedia.org/wiki/File:Eso1733s_Artist%27s_impression_of_merging_neutron_stars.jpg">University of Warwick/Mark Garlick</a></li>
<li>GitFlow: <a href="https://nvie.com/posts/a-successful-git-branching-model/">Vincent Driessen</a></li>
</ul></li>
<li>The Light Flow Diagram's colors are inspired by the diagram for GitFlow, and were specifically chosen to be consistent with it for easy comparison</li>
<li>Updates:
<ul>
<li>2020.11.16: Comparison with "Trunk Based Development"</li>
</ul></li>
</ul>]]></content>
  </entry>
  <entry>
      <title>How programmers should report bugs</title>
      <link href="https://yairchu.github.io/posts/programmer-bug-reports"/>
      <id>https://yairchu.github.io/posts/programmer-bug-reports</id>
      <updated>2020-09-21T00:00:SZ</updated>
      <category term="code"/>
      <category term="git"/>
      <category term="teamwork"/>
      <summary>How programmers should report bugs</summary>
      <content type="html"><![CDATA[<p>Programmers can submit better bug reports than normal users or QA engineers can.</p>
<p>First, let's recap the basics which apply to everyone -</p>
<h2 id="the-basic-bug-report-checklist">The basic bug report checklist</h2>
<ul>
<li>Verify that the issue still exists on the latest version</li>
<li>Search to see if the issue was already reported (avoid duplicates)</li>
<li>Provide all of the relevant steps to reproduce, with relevant details like software version and system details</li>
<li>Report additional info like whether the problem is a regression (it used to work in an older version)</li>
</ul>
<h2 id="going-futher-as-a-programmer">Going futher as a programmer</h2>
<p>Programmers can provide additional insight that normal users can't. The following is phrased for libraries but also applies for internal bug reports -</p>
<h3 id="reproduce-the-problem-with-the-example-programs">Reproduce the problem with the example programs</h3>
<p>Try to reproduce the problem with the library's example programs.</p>
<p>Reproducing the problem with the example is useful because everyone has access to it, and it is a better indicator that the bug is actually in the library rather than in user code.</p>
<p>If the bug cannot be reproduced in the example programs, try to see if you can extend them to reproduce it.</p>
<h3 id="add-a-failing-test">Add a failing test</h3>
<p>Can the problem be reproduced nicely in a test? A test to reproduce is can be invaluable to the developer trying to solve it, and having the test in the test suite will help assure that the problem won't resurface in the future!</p>
<h3 id="is-it-a-regression-bisect">Is it a regression? Bisect</h3>
<p>Is this problem new? Did it work fine in a previous version? Use <code>git bisect</code> to find where it broke! Finding the breaking commit can be invaluable in pinpointing the regression.</p>
<p>You could also leave a comment on the breaking commit and its author may notice. They may have relevant knowledge and be able to help!</p>
<h3 id="platform-specific-issues">Platform specific issues</h3>
<p>Is the problem specific to the kind of hardware that you have? Does it only happen on a specific OS version or distribution? It might be the case that the developers of the library don't have access to a system like yours. So any additional work you can do to offer insight might be invaluable for getting the problem fixed for you!</p>
<h3 id="fix-the-problem">Fix the problem</h3>
<p>Did you try the previous steps? With any luck, those already provide a lot of insight about the bug, and hopefully even made it obvious. If it's an easy fix, consider adding a PR to your bug report!</p>
<h3 id="notes">Notes</h3>
<ul>
<li>Image <a href="https://commons.wikimedia.org/wiki/File:Lloyd.webp">by LEGO</a>, found in wikimedia commons</li>
</ul>]]></content>
  </entry>
  <entry>
      <title>How to organise your git commits</title>
      <link href="https://yairchu.github.io/posts/organise-commits"/>
      <id>https://yairchu.github.io/posts/organise-commits</id>
      <updated>2020-09-03T00:00:SZ</updated>
      <category term="code"/>
      <category term="git"/>
      <summary>Why and how to organise git commits</summary>
      <content type="html"><![CDATA[<p>Suppose that in a fruitful day of work you:</p>
<ul>
<li>Fixed a bug</li>
<li>Changed some colors and text in the UI</li>
<li>Added a minor feature</li>
<li>Renamed some classes</li>
</ul>
<p>At the end of the day you may either push it all in one commit, or perhaps create a commit for each of those changes. In this post I'll argue that the latter choice is often better.</p>
<h2 id="the-benfits-of-separate-commits">The benfits of separate commits</h2>
<p>Let's examine how possible future tasks will be affected by keeping these changes in separate commits:</p>
<h3 id="reviewing-what-changed">Reviewing what changed</h3>
<p>If you make a PR, or someone wants to review these changes, it would be much easier to do with separate commits. They could quickly skim the rename commit which has lots of repeating boring changes, and they'll see all the bugfix's changes coherently grouped together. For the colors-change commit they may just have a glance on the new look and won't even need to examine its code representation.</p>
<h3 id="reverting-and-cherry-picking">Reverting and cherry-picking</h3>
<p>If later you discover that the minor feature is no longer desired, it would be easier to <code>git revert</code> it when it's a separate commit. Or if someone wants to grab only the bugfix change to the stable branch, they could easily <code>git cherry-pick</code> it when it's a separate commit.</p>
<h3 id="bisecting">Bisecting</h3>
<p>You may discover some bug in the future, and do a <code>git bisect</code> to find what change introduced it. With the commits separate, you'll get better more specific information when it pinpoints which commit introduced it.</p>
<h3 id="resolving-conflicts">Resolving conflicts</h3>
<p>When resolving merge conflicts in <a href="/posts/split-merge-to-smaller-pieces">the "small pieces" flow</a>, a lot less mental effort is involved when the changes are separated and explained in their commit messages. For example when resolving the conflicts resulting from the rename, sometimes just repeating <a href="https://github.com/da-x/git-search-replace">the <code>git-search-replace</code></a> followed <a href="/posts/git-mediate-stops-fear">by <code>git-mediate</code></a> will be enough to resolve them.</p>
<h3 id="code-archeology">Code archeology</h3>
<p>When trying to find where code originated using tools like <a href="https://www.syntevo.com/deepgit/">DeepGit</a> or <a href="https://magit.vc/">magit</a>, these tools are inteligent enough to recognize file renames and find the actual origin of the code before the rename. But if we mix too many changes together then their heuristics for recognizing renames may fail.</p>
<h2 id="how-to-make-the-commits-well-organised">How to make the commits well organised</h2>
<p>Example situation: You made the colors change, then the rename, and then did another color change.</p>
<p>One way to do things is to make a local commit after each change (one should use <code>git add -p</code> to make sure they're only adding the relevant changes to each commit). Doing this, after these changes you'll have three commits. Then before pushing, a <code>git rebase -i</code> can be used to squash the two color changes into one commit.</p>
<h2 id="conclusion">Conclusion</h2>
<p>It's good to split commits to coherent units, where renames are separate from bugfixes, etc. It's not only good when working in a team, but even when developing something alone. But note that there's no need to take it to the extreme and split them even further to microscopic commits (then just reviewing the list of commits will become tedious).</p>
<h2 id="notes">Notes</h2>
<ul>
<li>This isn't my own original concept, I'm just documenting it. From my experience this practice is moderately, but not universally, wide-spread.</li>
<li>Why did I write this: I wanted to explain this to a friend but I couldn't find any article in the Internet that I could send, so I wrote this one. Btw if you do know a good article on this topic, please direct me to it!</li>
<li>Image by <a href="https://pixabay.com/users/CapsandCapital-11428599/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4250499">Stu G</a> from <a href="https://pixabay.com/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4250499">Pixabay</a></li>
</ul>]]></content>
  </entry>
  <entry>
      <title>Time Travelling Refactor - Experience Report</title>
      <link href="https://yairchu.github.io/posts/time-travelling-refactor"/>
      <id>https://yairchu.github.io/posts/time-travelling-refactor</id>
      <updated>2020-09-02T00:00:SZ</updated>
      <category term="code"/>
      <category term="git"/>
      <category term="rebase"/>
      <category term="refactoring"/>
      <summary>Refactoring back in time</summary>
      <content type="html"><![CDATA[<p>For existing projects, considering switching libraries can be intimidating. We may not even be certain that the alternative is worth the switch.</p>
<p>Often we'd first evaluate candidate libraries with smaller example projects. This evaluation takes time, but it can save us a bigger time sink that could had happened if we discover that the library is actually not a good fit after already having put a lot of work into integrating it.</p>
<p>There's a middle approach between integrating with a toy and just switching on the actual project. In this approach we choose a very specific toy example for evaluation: an early, simpler version of the real project, which we can obtain from our version control history!</p>
<p>When possible, this has several benefits:</p>
<ul>
<li>Our evaluation is with something similar to the real project</li>
<li>The work we're doing for evaluation could be reused for integration in the real project!</li>
</ul>
<p>Re-using the work for the real project relies on our ability to <a href="/tag/merge">merge effectively</a>. I call this a "time travelling refactor", because we do the refactor of switching libraries "in the past" and then by merging we apply the effects of past changes to the present.</p>
<h2 id="experience-report">Experience report</h2>
<p>I've recently implemented this approach successfully, performing a library switch that I would otherwise feel intimidated from doing. I used <a href="/posts/split-merge-to-smaller-pieces"><code>sub-rebase</code> for splitting the merges to smaller steps</a> and <a href="/posts/git-mediate-stops-fear"><code>git-mediate</code> to resolve the conflicts</a>.</p>
<p>Did you ever do the "time travelling refactor"? Let me know if you did, how did your experience go, as well as if you know of any existing post on the topic.</p>
<ul>
<li><a href="https://www.flickr.com/photos/jjackowski/12236722024/">Image by Jeff Jacowski</a></li>
</ul>]]></content>
  </entry>
  <entry>
      <title>Web tech for desktop UI. Why?</title>
      <link href="https://yairchu.github.io/posts/web-based-desktop-ui"/>
      <id>https://yairchu.github.io/posts/web-based-desktop-ui</id>
      <updated>2020-08-30T00:00:SZ</updated>
      <category term="code"/>
      <category term="gui"/>
      <category term="web"/>
      <summary>Is using web technology for desktop UIs something we should want</summary>
      <content type="html"><![CDATA[<p>Over the years I've had my fair share of GUI development, using Qt, GTK, JUCE, FLTK, Kivy, GLFW, and web technologies.</p>
<p>Most of those were fine and easy to work with. The single exception - difficult, frustrating, with less helpful documentation and confusing APIs, is the web, where people struggle just to <a href="https://stackoverflow.com/questions/19461521/how-to-center-an-element-horizontally-and-vertically">center elements</a> in an area.</p>
<p>Electron, React Native, <a href="https://forum.juce.com/t/introducing-blueprint-build-native-juce-interfaces-with-react-js/34174/2">et</a> <a href="https://ultralig.ht/">cetera</a>, enable implementing desktop or mobile UIs using web technologies. One may wonder - why?! The tremendous value in those, is that when one has to implement a web version anyhow, they can now use one implementation for all platforms.</p>
<p>But occasionally I hear people genuinely excited about the possibility of using these for desktop-only software. I wonder why. Maybe folks which started their UI programming journey with the hazing experience which the web is, assume that it's as difficult in other platforms, so they are relunctant to needlessly go through such a process again to learn a new platform too. The promise of being able to use what they already know on more platforms relaxes them. I however, am horrified.</p>
<ul>
<li>Image: "Umbrella with holes, so it won't fly in the wind.". From <a href="https://www.instagram.com/p/BiBUP5hh2m9/">@mutzrayom</a>, by Gil Amsalem and Ariel Vitkon</li>
</ul>]]></content>
  </entry>
  <entry>
      <title>Black Lives Matter</title>
      <link href="https://yairchu.github.io/posts/black-lives-matter"/>
      <id>https://yairchu.github.io/posts/black-lives-matter</id>
      <updated>2020-06-27T00:00:SZ</updated>
      <category term="politics"/>
      <summary>Black Lives Matter</summary>
      <content type="html"><![CDATA[<p>The televised murder of the innocent George Floyd by police officers has initiated a discussion about police brutality in the US, specifically towards persons of color, along with a broader discussion on racism and on empathy.</p>
<h2 id="racism-is-common">Racism is common</h2>
<p>Racism, ultranationalism, and brutal violence were widespread throughout history and are still prevalent to this very day. It's not just a small group of weirdos that are on the side of racism, it is often the majority.</p>
<p>In the US, there's Trump. Certainly not all of his voters are racist, but racism isn't a show-stopper for them, which makes them complicitly racist.</p>
<h2 id="pick-your-battles">Pick your battles</h2>
<p>We can't address every injustice. That would devolve into whataboutism and dilute the conversation. There certainly are horrible things in the world. As a brief whatabout, what about prisoners in China <a href="https://www.nbcnews.com/news/world/china-forcefully-harvests-organs-detainees-tribunal-concludes-n1018646">being murdered for their organs</a>? Yes, that is horrifying, as are many other things, but even so, we should try to stay on topic, because:</p>
<p>We don't have the time or capacity to know about everything, nor ability to help. When an event triggers widespread attention on a specific topic, like the Me-Too movement recently or Black Lives Matter now, we do get the rare opportunity to make a difference, together!</p>
<p>If you care, then you should avoid whatabouting or retorting with "All Lives Matter!". "Black Lives Matter" doesn't mean that other lives don't. The context for this discussion is that US police act as if black lives, specifically black, <strong>don't</strong> matter to them. In this context, the retort communicates unwillingless to denounce these actions of police, which implies a belief that black lives don't matter.</p>
<h2 id="black-lives-matter">Black Lives Matter</h2>
<p>I said it in the title of this post, but I'd like to finish with a simple message: Black Lives Matter, and police should be held accountable for their actions. Police officers who murder should be punished. It may sound obvious but sadly the reality is far from this.</p>
<h2 id="defensive-appendix---on-being-a-phony">Defensive appendix - on being a phony</h2>
<p>In this extra section I'd like to pre-emptively reply to an anticipated comment. This hypothetical comment calls me a phony, for two reasons -</p>
<p>I'm not American, what do I even know about American police? I do feel embedded in american culture via the internet, TV, music.. But also, everyone should feel welcome to the conversation. I also see the discussion as part of a broader global discussion on empathy.</p>
<p>I'm also an Israeli, who spent four years of his life serving in the Israeli military. This is the very same military that "temporarily", for more than 40 years, maintains an Apartheid-like policy in <a href="https://en.wikipedia.org/wiki/Area_C_(West_Bank)">"Area C"</a>. In addition I can't help but notice that the BLM discussion is mostly ignored in Israeli society. From all of my Israeli friends and colleagues on Facebook, I've only noticed a single brave soul addressing it. All I can say is that this reality made writing this post challenging for me, and that I do agree that Israeli society has <strong>a lot</strong> of soul-searching to do.</p>
<h2 id="misc">Misc</h2>
<ul>
<li>"Not all of Trump's voters are racist, but racism isn't a show-stopper for them" - a very accurate observation from an unknown (to me) source - I did read it somewhere but can't locate it at the moment. If you know who observed this point it to me and I'll give proper credit</li>
</ul>]]></content>
  </entry>
  <entry>
      <title>C++ is the undefined language</title>
      <link href="https://yairchu.github.io/posts/c-plus-what"/>
      <id>https://yairchu.github.io/posts/c-plus-what</id>
      <updated>2020-06-17T00:00:SZ</updated>
      <category term="code"/>
      <category term="c++"/>
      <category term="history"/>
      <summary>C++ is the least standard language in popular use</summary>
      <content type="html"><![CDATA[<p>C++ <a href="https://en.wikipedia.org/wiki/C%2B%2B">is standardized by the international standards body ISO</a>, so one might expect it to be similar across different operating systems. Ironically, it is the only popular programming language that doesn't provide a consistent cross platform experience.</p>
<h2 id="some-examples-of-incompatability">Some examples of incompatability</h2>
<ul>
<li>The global namespace is littered differently across platforms. Can you use an innocent looking name like <code>Point</code>?
<ul>
<li><code>max</code> often breaks <code>std::max</code> in Visual Studio, while <code>std::max&lt;int&gt;</code> or <a href="https://stackoverflow.com/a/2789509/40916"><code>(std::max)</code> work fine</a></li>
</ul></li>
<li>Which standard library functions are available depend on your compiler version. Use <code>std::gcd</code>? Your code won't work on Visual Studio 2015
<ul>
<li>Some things are available under different names, like <code>std::array</code> vs <code>std::tr1::array</code></li>
<li>While not unique to C++, it does have it much worse because due to a lack of package management, developers are encouraged to use the standard library as much as possible</li>
</ul></li>
<li>Xcode limits usage of C++ features if you wish to support older macOS versions</li>
<li>Standard C constants like <code>M_PI</code> are missing in Visual Studio unless you <code>#define _USE_MATH_DEFINES</code> before <code>#include &lt;math.h&gt;</code>
<ul>
<li>As a consequence, changing the order of includes often breaks compilation!</li>
</ul></li>
<li>Want to use <code>__has_include</code> to conditionally compile parts of your library? It's only available in C++17 so check <code>__cplusplus</code> to see if you can use it. But in VS it doesn't really tell you the language version so be sure to check <code>_MSC_VER</code> too..</li>
<li>Equivalent attributes have different syntaxes - <code>__attribute__((aligned(32)))</code> vs <code>__declspec(align(32))</code></li>
<li>Run-time crashes in Windows upon using <code>dynamic_cast</code> with virtual inheritence while they work fine on macOS</li>
</ul>
<h2 id="how-did-we-get-there">How did we get there</h2>
<h3 id="the-original-sin---compatibility-for-your-soul">The original sin - compatibility for your soul</h3>
<p>C++ owes its success to being a superset of C, which made the transition easy for users of the popular systems language of the time.</p>
<p>There are many choices to make when designing a language, and the choices should work together if we want to reach a cohesive and sensible design. By inheriting all of C's choices, C++ handicapped its ability of doing this.</p>
<p>C++ has went so far that even its own name is a reference to <a href="https://stackoverflow.com/a/24904/40916">a C++ anti-pattern</a>.</p>
<h3 id="embrace-extend-and-extinguish">Embrace, extend, and extinguish</h3>
<p>Microsoft of the 1990s and early 2000s famously used <a href="https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish">the EEE strategy</a> in the browser wars.</p>
<p>They have clearly also used it in the PL/OS wars:</p>
<ul>
<li>Make Visual Studio the best IDE for C++, gain users, and gradually break compatability with other implementations</li>
<li>Code developed in the IDE will not work in other OSs, less software for those means users will keep preferring Windows</li>
<li>Profit!</li>
</ul>
<h3 id="complicated-standards-are-bug-prone">Complicated standards are bug prone</h3>
<p>We all know that programming is difficult. And standartisation is a form of programming. Relatively simple standards like the shapes and sizes of screws can be implemented successfully, but implementing a complicated standard like C++ without errors is unfeasable.</p>
<h2 id="whats-next">What's next</h2>
<p>C++ is currently the king in some industries (games, audio) because no other popular language addresses their needs. Sadly, I don't see this changing in the near future.</p>
<p>Perhaps one day Rust, Pony, D, Zig, Jai, or something that I haven't heard about will overtake C++'s throne. Let's hope, anything but this!</p>
<h2 id="misc">Misc</h2>
<ul>
<li><img src="/images/reddit.svg" alt="reddit" style="width: 20px; display: inline;"/> <a href="https://www.reddit.com/r/cpp/comments/hiiogp/c_is_the_undefined_language/">r/cpp</a> discussion</li>
<li>Removed mistake from the list after getting corrections from <a href="https://www.reddit.com/r/cpp/comments/hiiogp/c_is_the_undefined_language/fwgfrev/">mjklaim</a> and <a href="https://www.reddit.com/user/encyclopedist/">encyclopedist</a></li>
<li>Image source: <a href="http://gregmanshow.blogspot.com/2016/12/bd-37-le-travail-des-lutins.html">Le Gregman Show</a>, translated by <a href="https://www.reddit.com/r/ProgrammerHumor/comments/d2qfm9/hang_in_there_little_guy_stolen_translated_source/">Monjipour</a></li>
</ul>]]></content>
  </entry>
  <entry>
      <title>Break big merges to smaller pieces</title>
      <link href="https://yairchu.github.io/posts/split-merge-to-smaller-pieces"/>
      <id>https://yairchu.github.io/posts/split-merge-to-smaller-pieces</id>
      <updated>2020-04-22T00:00:SZ</updated>
      <category term="code"/>
      <category term="git"/>
      <category term="merge"/>
      <category term="rebase"/>
      <summary>Tactics for merging in smaller chunks</summary>
      <content type="html"><![CDATA[<p>Merges with many conflicts are horrifying.</p>
<p>As the chance for a conflict resolution mistake increases, we can't run the tests to verify correctness until all of the conflicts are resolved.</p>
<p>Often, however, we can break the merge process down to smaller pieces, where we can check and save our work after each step!</p>
<p><img src="/images/merge.svg" alt="Git merge" /></p>
<p>The simplest way to break a merge down is to apply "sub-merges" which merge a single commit at a time.</p>
<p><img src="/images/sub-merge.svg" alt="Git merge with sub-merges" /></p>
<p>Each sub-merge involves less conflicts and we can run our test-suite to verify ourselves.</p>
<p>A down-side of this simple approach is that it may be tedious to do manually and it will result in a very complicated git history tree.</p>
<p>One way to resolve the history issue is to rewrite it, which one can do with <code>git rebase</code>.</p>
<p>If we rebase rather than merge, the following script makes the process easy by automating it:</p>
<h2 id="sub-rebasesh">sub-rebase.sh</h2>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="co">#!/bin/bash</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="va">BASE=${1:-</span>master<span class="va">}</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="kw">while</span> <span class="fu">true</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="kw">do</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>    <span class="co"># Find next commit to rebase to</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>    <span class="va">NEXT_COMMIT=</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>    <span class="va">COMMON_ANCESTOR=$(</span><span class="fu">git</span> merge-base HEAD <span class="va">$BASE)</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>    <span class="kw">for</span> <span class="ex">COMMIT</span> in <span class="va">$(</span><span class="fu">git</span> rev-list ..<span class="va">$BASE</span> --reverse<span class="va">)</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>    <span class="kw">do</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>        <span class="kw">if</span><span class="bu"> [</span> <span class="va">$(</span><span class="fu">git</span> merge-base HEAD <span class="va">$COMMIT)</span> <span class="ot">==</span> <span class="va">$COMMON_ANCESTOR</span><span class="bu"> ]</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>        <span class="kw">then</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a>            <span class="co"># Rebasing on this commit will strictly progress towards our goal</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>            <span class="va">NEXT_COMMIT=$COMMIT</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>            <span class="bu">break</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a>        <span class="kw">fi</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true"></a>        <span class="co"># The commit is not strictly ahead of BASE</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true"></a>        <span class="bu">echo</span> Skipping <span class="va">$COMMIT</span> as it is not strictly ahead of <span class="va">$BASE</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true"></a>    <span class="kw">done</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true"></a></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true"></a>    [ <span class="st">&quot;</span><span class="va">$NEXT_COMMIT</span><span class="st">&quot;</span> == <span class="st">&quot;&quot;</span> ] <span class="kw">&amp;&amp;</span> <span class="bu">echo</span> <span class="st">&quot;Done&quot;</span> <span class="kw">&amp;&amp;</span> <span class="bu">exit</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true"></a>    <span class="bu">echo</span> Rebasing over <span class="va">$NEXT_COMMIT</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true"></a>    <span class="fu">git</span> rebase <span class="va">$NEXT_COMMIT</span> <span class="kw">||</span> <span class="bu">exit</span> 1</span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true"></a><span class="kw">done</span></span></code></pre></div>
<p>It rebases up to the first parent of the base branch which has any merge conflicts to address (so it doesn't accumulate conflicts from multiple commits).</p>
<p>Apply it to advance towards your complete merge in smaller, testable pieces.</p>
<p>Notes:</p>
<ul>
<li>This process works well when we commit often in small commits.</li>
<li>For resolving the conflicts, <a href="/posts/git-mediate-stops-fear">I recommend using git-mediate</a></li>
<li>Image from <a href="https://www.reddit.com/r/funny/comments/ub7x3/fail_shape_sorter_college_campus_level/">this meme</a></li>
</ul>
<p>Updates:</p>
<ul>
<li>2020.05.19: Updated script to skip over commits that are not strictly ahead of the common ancestor with the base branch</li>
</ul>]]></content>
  </entry>
  <entry>
      <title>Basic error reporting for optics</title>
      <link href="https://yairchu.github.io/posts/optics-with-error-reporting"/>
      <id>https://yairchu.github.io/posts/optics-with-error-reporting</id>
      <updated>2020-01-02T00:00:SZ</updated>
      <category term="code"/>
      <category term="haskell"/>
      <category term="optics"/>
      <summary>Adding error reportinh to folds, traversals and prisms</summary>
      <content type="html"><![CDATA[<p>When <a href="http://hackage.haskell.org/package/lens-4.18.1/docs/Control-Lens-Fold.html#v:-94--63-"><code>^?</code></a> returns <code>Nothing</code>, it is often desired to know why.</p>
<p>Let's define a <code>^??</code> operator which returns an <code>Either</code> instead of a <code>Maybe</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">newtype</span> <span class="dt">ConstEither</span> e r a <span class="ot">=</span> <span class="dt">ConstEither</span> {<span class="ot"> getConstEither ::</span> <span class="dt">Either</span> e r }</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>    <span class="kw">deriving</span> <span class="dt">Functor</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="kw">infixl</span> <span class="dv">8</span> <span class="op">^??</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="ot">(^??) ::</span> s <span class="ot">-&gt;</span> <span class="dt">LensLike&#39;</span> (<span class="dt">ConstEither</span> e a) s a <span class="ot">-&gt;</span> <span class="dt">Either</span> e a</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>whole <span class="op">^??</span> f <span class="ot">=</span> f (<span class="dt">ConstEither</span> <span class="op">.</span> <span class="dt">Right</span>) whole <span class="op">&amp;</span> getConstEither</span></code></pre></div>
<p>The standard optics (<code>Traversal</code>, <code>Prism</code>, etc) do not work with our new combinator, so let's see how we can define ones which would.</p>
<p><a href="http://hackage.haskell.org/package/lens-4.18.1/docs/Control-Lens-Traversal.html#v:Traversal"><code>Traversal s t a b</code></a> is <code>forall f. Applicative f =&gt; (a -&gt; f b) -&gt; s -&gt; f t</code> and it uses <code>f</code>'s <code>pure</code> in the empty case, so we'll replace the <code>Applicative</code> with a verbose variant which supplies error information in the empty case:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Apply</span> f <span class="ot">=&gt;</span> <span class="dt">VerboseApplicative</span> e f <span class="kw">where</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="ot">    vpure ::</span> e <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> f a</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">VerboseTraversal</span> e s t a b <span class="ot">=</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>    <span class="kw">forall</span> f<span class="op">.</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>    <span class="dt">VerboseApplicative</span> e f <span class="ot">=&gt;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>    <span class="dt">LensLike</span> f s t a b</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">VerbosePrism</span> e s t a b <span class="ot">=</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a>    <span class="kw">forall</span> p f<span class="op">.</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>    (<span class="dt">Choice</span> p, <span class="dt">VerboseApplicative</span> e f) <span class="ot">=&gt;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>    <span class="dt">Optic</span> p f s t a b</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">VerboseTraversal&#39;</span> e s a <span class="ot">=</span> <span class="dt">VerboseTraversal</span> e s s a a</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">VerbosePrism&#39;</span> e s a <span class="ot">=</span> <span class="dt">VerbosePrism</span> e s s a a</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true"></a><span class="co">-- Verbose optics support for (^.) and (^..)</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Monoid</span> r <span class="ot">=&gt;</span> <span class="dt">VerboseApplicative</span> e (<span class="dt">Const</span> r) <span class="kw">where</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true"></a>    vpure _ <span class="ot">=</span> <span class="fu">pure</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true"></a></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true"></a><span class="co">-- Verbose optics support for `preview`, aka (#)</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">VerboseApplicative</span> e <span class="dt">Identity</span> <span class="kw">where</span></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true"></a>    vpure _ <span class="ot">=</span> <span class="fu">pure</span></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true"></a></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true"></a><span class="co">-- Verbose optics support for our (^??)</span></span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Apply</span> (<span class="dt">ConstEither</span> e r) <span class="kw">where</span></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true"></a>    <span class="dt">ConstEither</span> x <span class="op">&lt;.&gt;</span> _ <span class="ot">=</span> <span class="dt">ConstEither</span> x</span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true"></a><span class="kw">instance</span> e <span class="op">~</span> e&#39; <span class="ot">=&gt;</span> <span class="dt">VerboseApplicative</span> e (<span class="dt">ConstEither</span> e&#39; r) <span class="kw">where</span></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true"></a>    vpure e _ <span class="ot">=</span> <span class="dt">ConstEither</span> (<span class="dt">Left</span> e)</span></code></pre></div>
<p>Now we may want an operator to transform optics into verbose optics:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="co">-- Given an error message constructor, turns:</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="co">-- * Traversal to VerboseTraversal</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="co">-- * Prism to VerbosePrism</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="ot">verbose ::</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>    (<span class="dt">Profunctor</span> p, <span class="dt">VerboseApplicative</span> e f) <span class="ot">=&gt;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>    (t <span class="ot">-&gt;</span> e) <span class="ot">-&gt;</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>    <span class="dt">Optic</span> p (<span class="dt">Lift</span> f) s t a b <span class="ot">-&gt;</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>    <span class="dt">Optic</span> p f s t a b</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>verbose e t <span class="ot">=</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a>    rmap f <span class="op">.</span> t <span class="op">.</span> rmap <span class="dt">Other</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a>        f (<span class="dt">Other</span> r) <span class="ot">=</span> r</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true"></a>        f (<span class="dt">Pure</span> r) <span class="ot">=</span> vpure (e r) r</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true"></a></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true"></a><span class="co">-- A fixed variant of transformers:Control.Applicative.Lift -</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true"></a><span class="co">-- Turns an Apply to an Applicative</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true"></a><span class="co">-- (transformer&#39;s versions Applicative instance requires Applicative f)</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Lift</span> f a <span class="ot">=</span> <span class="dt">Pure</span> a <span class="op">|</span> <span class="dt">Other</span> (f a)</span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true"></a>    <span class="kw">deriving</span> <span class="dt">Functor</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true"></a></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Apply</span> f <span class="ot">=&gt;</span> <span class="dt">Applicative</span> (<span class="dt">Lift</span> f) <span class="kw">where</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true"></a>    <span class="fu">pure</span> <span class="ot">=</span> <span class="dt">Pure</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true"></a>    <span class="dt">Pure</span> f <span class="op">&lt;*&gt;</span> <span class="dt">Pure</span> x <span class="ot">=</span> <span class="dt">Pure</span> (f x)</span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true"></a>    <span class="dt">Pure</span> f <span class="op">&lt;*&gt;</span> <span class="dt">Other</span> x <span class="ot">=</span> <span class="dt">Other</span> (f <span class="op">&lt;$&gt;</span> x)</span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true"></a>    <span class="dt">Other</span> f <span class="op">&lt;*&gt;</span> <span class="dt">Pure</span> x <span class="ot">=</span> <span class="dt">Other</span> (f <span class="op">&lt;&amp;&gt;</span> (<span class="op">$</span> x))</span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true"></a>    <span class="dt">Other</span> f <span class="op">&lt;*&gt;</span> <span class="dt">Other</span> x <span class="ot">=</span> <span class="dt">Other</span> (liftF2 (<span class="op">$</span>) f x)</span></code></pre></div>
<p>Note that I haven't found how to make <code>verbose</code> also turn a <a href="http://hackage.haskell.org/package/lens-4.18.1/docs/Control-Lens-Fold.html#t:Fold"><code>Fold</code></a> to a verbose variant.</p>
<p>To see our verbose optics in action we'll make some verbose variants of optics from <a href="https://hackage.haskell.org/package/lens-aeson/docs/Data-Aeson-Lens.html"><code>lens-aeson</code></a>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Err</span> <span class="ot">=</span> <span class="dt">String</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="ot">v_Value ::</span> (<span class="dt">AsValue</span> t, <span class="dt">Show</span> t) <span class="ot">=&gt;</span> <span class="dt">VerbosePrism&#39;</span> <span class="dt">Err</span> t <span class="dt">Value</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>v_Value <span class="ot">=</span> verbose (\x <span class="ot">-&gt;</span> <span class="st">&quot;Doesn&#39;t parse as JSON: &quot;</span> <span class="op">&lt;&gt;</span> <span class="fu">show</span> x) _Value</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a><span class="ot">v_Double ::</span> (<span class="dt">ToJSON</span> t, <span class="dt">AsNumber</span> t) <span class="ot">=&gt;</span> <span class="dt">VerbosePrism&#39;</span> <span class="dt">Err</span> t <span class="dt">Double</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>v_Double <span class="ot">=</span> verbose (expectJson <span class="st">&quot;number&quot;</span>) _Double</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a><span class="ot">vnth ::</span> (<span class="dt">ToJSON</span> t, <span class="dt">AsValue</span> t) <span class="ot">=&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">VerboseTraversal&#39;</span> <span class="dt">Err</span> t <span class="dt">Value</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>vnth i <span class="ot">=</span> verbose (expectJson (<span class="st">&quot;item at index &quot;</span> <span class="op">&lt;&gt;</span> <span class="fu">show</span> i)) (nth i)</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a><span class="ot">expectJson ::</span> <span class="dt">ToJSON</span> a <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Err</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a>expectJson e x <span class="ot">=</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>    <span class="st">&quot;Expected &quot;</span> <span class="op">&lt;&gt;</span> e <span class="op">&lt;&gt;</span> <span class="st">&quot; but found &quot;</span> <span class="op">&lt;&gt;</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>    Data.ByteString.Lazy.Char8.unpack (encode x)</span></code></pre></div>
<p>Now let's see they work:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="pp"># Verbose traversals can work like regular traversals</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a><span class="op">&gt;</span> <span class="st">&quot;[1, \&quot;x\&quot;]&quot;</span> <span class="op">^?</span> _Value <span class="op">.</span> nth <span class="dv">0</span> <span class="op">.</span> _Double</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a><span class="dt">Just</span> <span class="fl">1.0</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a><span class="op">&gt;</span> <span class="st">&quot;[1, \&quot;x\&quot;]&quot;</span> <span class="op">^?</span> v_Value <span class="op">.</span> vnth <span class="dv">0</span> <span class="op">.</span> v_Double</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a><span class="dt">Just</span> <span class="fl">1.0</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a><span class="op">&gt;</span> <span class="st">&quot;[1, \&quot;x\&quot;]&quot;</span> <span class="op">^?</span> v_Value <span class="op">.</span> vnth <span class="dv">1</span> <span class="op">.</span> v_Double</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a><span class="dt">Nothing</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a><span class="pp"># But using ^?? rather than ^? we can also get error info</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true"></a><span class="op">&gt;</span> <span class="st">&quot;[1, \&quot;x\&quot;]&quot;</span> <span class="op">^??</span> v_Value <span class="op">.</span> vnth <span class="dv">0</span> <span class="op">.</span> v_Double</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true"></a><span class="dt">Right</span> <span class="fl">1.0</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true"></a><span class="op">&gt;</span> <span class="st">&quot;[1, \&quot;x\&quot;]&quot;</span> <span class="op">^??</span> v_Value <span class="op">.</span> vnth <span class="dv">1</span> <span class="op">.</span> v_Double</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true"></a><span class="dt">Left</span> <span class="st">&quot;Expected number but found \&quot;x\&quot;&quot;</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true"></a><span class="op">&gt;</span> <span class="st">&quot;[1, \&quot;x\&quot;]&quot;</span> <span class="op">^??</span> v_Value <span class="op">.</span> vnth <span class="dv">2</span> <span class="op">.</span> v_Double</span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true"></a><span class="dt">Left</span> <span class="st">&quot;Expected item at index 2 but found [1,\&quot;x\&quot;]&quot;</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true"></a><span class="op">&gt;</span> <span class="st">&quot;hello&quot;</span> <span class="op">^??</span> v_Value <span class="op">.</span> v_Double</span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true"></a><span class="dt">Left</span> <span class="st">&quot;Doesn&#39;t parse as JSON: \&quot;hello\&quot;&quot;</span></span></code></pre></div>
<h2 id="notes">Notes</h2>
<p><a href="https://www.reddit.com/r/haskell/comments/eh4gpg/elegant_ast_parsing_and_building_with_prisms/fcl7dvv/">In the previous post's discussion</a>, <a href="https://github.com/ekmett/lens"><code>lens</code></a>'s creator Edward Kmett noted that in <code>lens</code>'s early days they experimented with a different formulation of error-reporting optics that placed the extra information in <code>Optic p f s t a b</code>'s <code>p</code> rather than <code>f</code>, but that with that formulation they ran into problems with inference and that this new formulation may work better.</p>
<h2 id="request-for-feedback">Request for feedback</h2>
<ul>
<li>Do you have use cases for this? If so, do you think that this should belong in <code>lens</code>?</li>
<li>Should it belong in a separate package? Perhaps along with the previous posts' <code>Prism</code> combinators and with additional optics like <a href="https://github.com/ekmett/lens/issues/904">inverted <code>Prism</code>s and partial <code>Iso</code>s</a>?</li>
<li>Any code suggestions or improvements?</li>
</ul>
<p>Discussion</p>
<ul>
<li><img src="/images/reddit.svg" alt="reddit" style="width: 20px; display: inline;"/> <a href="https://www.reddit.com/r/haskell/comments/ej15ar/basic_error_reporting_for_optics/">r/haskell</a></li>
</ul>
<p><a href="https://www.peakpx.com/637476/railway-line-train-railway-crossing-sky-no-people">Image source</a></p>]]></content>
  </entry>
  <entry>
      <title>Elegant AST Parsing and Building with Prisms</title>
      <link href="https://yairchu.github.io/posts/codecs-as-prisms-asts"/>
      <id>https://yairchu.github.io/posts/codecs-as-prisms-asts</id>
      <updated>2019-12-29T00:00:SZ</updated>
      <category term="code"/>
      <category term="declarative"/>
      <category term="haskell"/>
      <category term="optics"/>
      <category term="parsing"/>
      <category term="construct"/>
      <summary>Declarative parsing and pretty printing for language ASTs</summary>
      <content type="html"><![CDATA[<p>Following my <a href="codecs-as-prisms">previous post</a> which suggested the use of <code>Prism</code>s for parsing and building, using a binary format example - I also want to show how the same idea can work nicely for parsing and building programming language syntax.</p>
<h2 id="simple-ast-example">Simple AST example</h2>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Expr</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>    <span class="ot">=</span> <span class="dt">Lit</span> <span class="dt">Int</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">Add</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">Mul</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>    <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>, <span class="dt">Generic</span>)</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>makePrisms &#39;<span class="dt">&#39;Expr</span></span></code></pre></div>
<p>Here's our <code>Prism</code> for parsing and building the above AST:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="op">&gt;</span> expr <span class="op">#</span> <span class="dt">Mul</span> (<span class="dt">Add</span> (<span class="dt">Lit</span> <span class="dv">1</span>) (<span class="dt">Lit</span> <span class="dv">2</span>)) (<span class="dt">Lit</span> <span class="dv">3</span>)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="st">&quot;(1 + 2) * 3&quot;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="ot">expr ::</span> <span class="dt">Prism&#39;</span> <span class="dt">String</span> <span class="dt">Expr</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>expr <span class="ot">=</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>    tokens <span class="op">.</span>      <span class="co">-- convert string to tokens</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>    takeExpr <span class="op">.</span>    <span class="co">-- take the expression</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>    secondOnly [] <span class="co">-- and there should be no remaining tokens</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a><span class="ot">takeExpr ::</span> <span class="dt">Prism&#39;</span> [<span class="dt">String</span>] (<span class="dt">Expr</span>, [<span class="dt">String</span>])</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>takeExpr <span class="ot">=</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>    infixOpLeftRecursion <span class="st">&quot;+&quot;</span> _Add <span class="op">$</span> <span class="co">-- Additions of</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a>    infixOpLeftRecursion <span class="st">&quot;*&quot;</span> _Mul <span class="op">$</span> <span class="co">-- multiplications of</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a>    tryMatch (asideFirst _Lit)      <span class="co">-- literals or</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a>        (_Cons <span class="op">.</span> asideFirst _Show) <span class="op">$</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a>    _Cons <span class="op">.</span> firstOnly <span class="st">&quot;(&quot;</span> <span class="op">.</span>         <span class="co">-- expressions in parentheses</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true"></a>        takeExpr <span class="op">.</span> aside (_Cons <span class="op">.</span> firstOnly <span class="st">&quot;)&quot;</span>)</span></code></pre></div>
<p>This uses the following combinators:</p>
<ul>
<li><a href="http://hackage.haskell.org/package/lens-4.18.1/docs/Control-Lens-Cons.html"><code>_Cons</code></a>, <a href="http://hackage.haskell.org/package/lens-4.18.1/docs/Control-Lens-Prism.html#v:_Show"><code>_Show</code></a>, and <a href="http://hackage.haskell.org/package/lens-4.18.1/docs/Control-Lens-Prism.html#v:aside"><code>aside</code></a> from <a href="http://hackage.haskell.org/package/lens"><code>Control.Lens</code></a></li>
<li><code>firstOnly</code>, <code>secondOnly</code>, and <code>asideFirst</code> from <a href="codecs-as-prisms#parse-build-prism-combinators">the previous post</a></li>
<li><code>tokens</code>, <code>infixOpLeftRecursion</code>, and <code>tryMatch</code> are defined in the <a href="#appendix">appendix</a> at the bottom</li>
</ul>
<h2 id="observations">Observations</h2>
<p>In the previous post, <code>Prism</code>s didn't match up to Python's <a href="https://construct.readthedocs.io/en/latest/intro.html">Construct</a> in encoding binary protocols, where Construct made good use of structural duck types (though this appears solvable with some effort). However, for programming language syntax <code>Prism</code>s seem very elegant imho.</p>
<p>Note how we harness optics' parametricity and composition. In the previous post we parsed <code>ByteString</code>s but here we parse <code>String</code> and we start by converting them to tokens (ie <code>[String]</code>) and parse that.</p>
<h3 id="renegade-prisms">Renegade prisms</h3>
<p>Unlike the previous post's lawful <code>Prism</code>s, this post's parsing is lossy, so it breaks the <a href="https://artyom.me/lens-over-tea-2#traversal-laws"><code>Traversal</code> laws</a>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="op">&gt;</span> <span class="st">&quot;1 + (2*3)&quot;</span> <span class="op">&amp;</span> expr <span class="op">%~</span> <span class="fu">id</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="st">&quot;1 + 2 * 3&quot;</span></span></code></pre></div>
<p>If one desires lawful parsing Prisms, their AST representation has to represent white-space and redundant parentheses.</p>
<p>A <code>Prism</code> law that is kept is that if you parse what you built you do get it back:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Test.QuickCheck.Arbitrary.ADT</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>propParseBack e <span class="ot">=</span> (expr <span class="op">#</span> e) <span class="op">^?</span> expr <span class="op">==</span> <span class="dt">Just</span> e</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Arbitrary</span> <span class="dt">Expr</span> <span class="kw">where</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>    arbitrary <span class="ot">=</span> genericArbitrary</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>    shrink <span class="ot">=</span> genericShrink</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a><span class="op">&gt;</span> quickCheck propParseBack</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a><span class="op">+++</span> <span class="dt">OK</span>, passed <span class="dv">100</span> tests<span class="op">.</span></span></code></pre></div>
<h3 id="caveat-meaninful-parse-errors">Caveat: meaninful parse errors</h3>
<p>When parsing with this <code>Prism</code> fails, it offers no useful error-reporting. But do I believe that this is solvable and I'll address it in future posts.</p>
<h2 id="request-for-feedback">Request for feedback</h2>
<ul>
<li>Do you think that some extra combinators used here (<code>asideFirst</code>, <code>firstOnly</code>, etc) should belong in <a href="http://hackage.haskell.org/package/lens"><code>lens</code></a>?</li>
<li>Or prehaps these combinators should belong in a separate package? How would you call it?</li>
<li>Any suggestions as for naming these combinators? Other code improvements?</li>
<li>Image credit: Does anyone know who is the artist for the opening image? (I found it on <a href="https://www.pinterest.com/pin/800303796254211989/">the internets</a>)</li>
</ul>
<p>Btw: Thanks to Eyal Lotem for reading drafts of this.</p>
<p>Discussion:</p>
<ul>
<li><img src="/images/reddit.svg" alt="reddit" style="width: 20px; display: inline;"/> <a href="https://www.reddit.com/r/haskell/comments/eh4gpg/elegant_ast_parsing_and_building_with_prisms/">r/haskell</a></li>
</ul>
<h2 id="appendix">Appendix</h2>
<h3 id="ast-parse-build-prism-combinators">AST parse-build prism combinators</h3>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="co">-- Extend a base parsing prism with applications of an operator</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="ot">infixOpLeftRecursion ::</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>    <span class="dt">Eq</span> a <span class="ot">=&gt;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>    a <span class="ot">-&gt;</span>                        <span class="co">-- The operator&#39;s text</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>    <span class="dt">Prism&#39;</span> expr (expr, expr) <span class="ot">-&gt;</span> <span class="co">-- The operator constructor&#39;s prism</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>    <span class="dt">Prism&#39;</span> [a] (expr, [a]) <span class="ot">-&gt;</span>   <span class="co">-- The base parsing prism</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>    <span class="dt">Prism&#39;</span> [a] (expr, [a])</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>infixOpLeftRecursion operatorText cons sub <span class="ot">=</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a>    leftRecursion cons</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a>    (aside (_Cons <span class="op">.</span> firstOnly operatorText <span class="op">.</span> sub) <span class="op">.</span> retuple)</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a>    sub</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true"></a></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true"></a><span class="co">-- Extend a base parsing prism with extensions to its right side</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true"></a><span class="ot">leftRecursion ::</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true"></a>    <span class="dt">Prism&#39;</span> whole cons <span class="ot">-&gt;</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true"></a>    <span class="dt">Prism&#39;</span> (whole, state) (cons, state) <span class="ot">-&gt;</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true"></a>    <span class="dt">Prism&#39;</span> state (whole, state) <span class="ot">-&gt;</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true"></a>    <span class="dt">Prism&#39;</span> state (whole, state)</span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true"></a>leftRecursion cons extend base <span class="ot">=</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true"></a>    prism&#39; build (<span class="fu">fmap</span> parseExtends <span class="op">.</span> (<span class="op">^?</span> base))</span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true"></a>        build (x, state) <span class="ot">=</span></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true"></a>            <span class="fu">maybe</span></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true"></a>            (base <span class="op">#</span> (x, state))</span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true"></a>            (build <span class="op">.</span> (extend <span class="op">#</span>) <span class="op">.</span> (, state)) (x <span class="op">^?</span> cons)</span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true"></a>        parseExtends x <span class="ot">=</span></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true"></a>            x <span class="op">^?</span> extend <span class="op">&lt;&amp;&gt;</span> _1 <span class="op">%~</span> (cons <span class="op">#</span>) <span class="op">&amp;</span> <span class="fu">maybe</span> x parseExtends</span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true"></a></span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true"></a><span class="co">-- Add an encoding for a sum-type constructor to an existing prism</span></span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true"></a><span class="ot">tryMatch ::</span></span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true"></a>    <span class="dt">Prism&#39;</span> whole cons <span class="ot">-&gt;</span> <span class="co">-- The sum-type constructor prism</span></span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true"></a>    <span class="dt">Prism&#39;</span> src cons <span class="ot">-&gt;</span>   <span class="co">-- Parse the constructor contents</span></span>
<span id="cb5-33"><a href="#cb5-33" aria-hidden="true"></a>    <span class="dt">Prism&#39;</span> src whole <span class="ot">-&gt;</span>  <span class="co">-- Prism to encode the other options</span></span>
<span id="cb5-34"><a href="#cb5-34" aria-hidden="true"></a>    <span class="dt">Prism&#39;</span> src whole</span>
<span id="cb5-35"><a href="#cb5-35" aria-hidden="true"></a>tryMatch cons parse fallback <span class="ot">=</span></span>
<span id="cb5-36"><a href="#cb5-36" aria-hidden="true"></a>    prism&#39; build (\x <span class="ot">-&gt;</span> (x <span class="op">^?</span> parse <span class="op">&lt;&amp;&gt;</span> (cons <span class="op">#</span>)) <span class="op">&lt;|&gt;</span> x <span class="op">^?</span> fallback)</span>
<span id="cb5-37"><a href="#cb5-37" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb5-38"><a href="#cb5-38" aria-hidden="true"></a>        build x <span class="ot">=</span> <span class="fu">maybe</span> (fallback <span class="op">#</span> x) (parse <span class="op">#</span>) (x <span class="op">^?</span> cons)</span>
<span id="cb5-39"><a href="#cb5-39" aria-hidden="true"></a></span>
<span id="cb5-40"><a href="#cb5-40" aria-hidden="true"></a><span class="co">-- Transform a string into tokens</span></span>
<span id="cb5-41"><a href="#cb5-41" aria-hidden="true"></a><span class="ot">tokens ::</span> <span class="dt">Iso&#39;</span> <span class="dt">String</span> [<span class="dt">String</span>]</span>
<span id="cb5-42"><a href="#cb5-42" aria-hidden="true"></a>tokens <span class="ot">=</span></span>
<span id="cb5-43"><a href="#cb5-43" aria-hidden="true"></a>    iso splitTokens (<span class="fu">foldr</span> addToken <span class="st">&quot;&quot;</span>)</span>
<span id="cb5-44"><a href="#cb5-44" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb5-45"><a href="#cb5-45" aria-hidden="true"></a>        addToken x <span class="st">&quot;&quot;</span> <span class="ot">=</span> x</span>
<span id="cb5-46"><a href="#cb5-46" aria-hidden="true"></a>        addToken [x] y</span>
<span id="cb5-47"><a href="#cb5-47" aria-hidden="true"></a>            <span class="op">|</span> <span class="dt">Char</span><span class="op">.</span>generalCategory x <span class="op">==</span> <span class="dt">Char</span><span class="op">.</span><span class="dt">OpenPunctuation</span> <span class="ot">=</span> x <span class="op">:</span> y</span>
<span id="cb5-48"><a href="#cb5-48" aria-hidden="true"></a>        addToken x (y<span class="op">:</span>ys)</span>
<span id="cb5-49"><a href="#cb5-49" aria-hidden="true"></a>            <span class="op">|</span> <span class="dt">Char</span><span class="op">.</span>generalCategory y <span class="op">==</span> <span class="dt">Char</span><span class="op">.</span><span class="dt">ClosePunctuation</span> <span class="ot">=</span> x <span class="op">&lt;&gt;</span> (y<span class="op">:</span>ys)</span>
<span id="cb5-50"><a href="#cb5-50" aria-hidden="true"></a>        addToken x y <span class="ot">=</span> x <span class="op">&lt;&gt;</span> <span class="st">&quot; &quot;</span> <span class="op">&lt;&gt;</span> y</span>
<span id="cb5-51"><a href="#cb5-51" aria-hidden="true"></a>        isOp <span class="ot">=</span></span>
<span id="cb5-52"><a href="#cb5-52" aria-hidden="true"></a>            (<span class="ot">`elem`</span> [<span class="dt">Char</span><span class="op">.</span><span class="dt">MathSymbol</span>, <span class="dt">Char</span><span class="op">.</span><span class="dt">OtherPunctuation</span>]) <span class="op">.</span></span>
<span id="cb5-53"><a href="#cb5-53" aria-hidden="true"></a>            <span class="dt">Char</span><span class="op">.</span>generalCategory</span>
<span id="cb5-54"><a href="#cb5-54" aria-hidden="true"></a>        isParen <span class="ot">=</span> (<span class="ot">`elem`</span> <span class="st">&quot;()[]{}&quot;</span>)</span>
<span id="cb5-55"><a href="#cb5-55" aria-hidden="true"></a>        splitTokens <span class="st">&quot;&quot;</span> <span class="ot">=</span> []</span>
<span id="cb5-56"><a href="#cb5-56" aria-hidden="true"></a>        splitTokens (x<span class="op">:</span>s<span class="op">:</span>xs) <span class="op">|</span> <span class="dt">Char</span><span class="op">.</span><span class="fu">isSpace</span> s <span class="ot">=</span> [x] <span class="op">:</span> splitTokens xs</span>
<span id="cb5-57"><a href="#cb5-57" aria-hidden="true"></a>        splitTokens (s<span class="op">:</span>xs) <span class="op">|</span> <span class="dt">Char</span><span class="op">.</span><span class="fu">isSpace</span> s <span class="ot">=</span> splitTokens xs</span>
<span id="cb5-58"><a href="#cb5-58" aria-hidden="true"></a>        splitTokens (x<span class="op">:</span>xs) <span class="op">|</span> isParen x <span class="ot">=</span> [x] <span class="op">:</span> splitTokens xs</span>
<span id="cb5-59"><a href="#cb5-59" aria-hidden="true"></a>        splitTokens (x<span class="op">:</span>xs) <span class="ot">=</span></span>
<span id="cb5-60"><a href="#cb5-60" aria-hidden="true"></a>            <span class="kw">case</span> splitTokens xs <span class="kw">of</span></span>
<span id="cb5-61"><a href="#cb5-61" aria-hidden="true"></a>            [] <span class="ot">-&gt;</span> [[x]]</span>
<span id="cb5-62"><a href="#cb5-62" aria-hidden="true"></a>            ((y<span class="op">:</span>ys) <span class="op">:</span> zs) <span class="op">|</span> <span class="fu">not</span> (isParen y) <span class="op">&amp;&amp;</span> isOp x <span class="op">==</span> isOp y <span class="ot">-&gt;</span> (x<span class="op">:</span>y<span class="op">:</span>ys) <span class="op">:</span> zs</span>
<span id="cb5-63"><a href="#cb5-63" aria-hidden="true"></a>            ys <span class="ot">-&gt;</span> [x] <span class="op">:</span> ys</span></code></pre></div>
<ul>
<li>The <code>retuple</code> <code>Iso</code> was <a href="codecs-as-prisms#parse-build-prism-combinators">defined in the previous post</a></li>
<li><code>tryMatch</code> takes two prisms from the unparsed source and from the resulting structure to the matched pattern. If there were optics for inversed prisms and <a href="https://stackoverflow.com/questions/59426379/optic-for-partial-conversion-on-both-sides/59441415#59441415">partial isomorphisms</a> then these could be combined into one argument and the existing <a href="http://hackage.haskell.org/package/lens-4.18.1/docs/Control-Lens-Combinators.html#v:failing"><code>failing</code></a> combinator could replace <code>tryMatch</code>.</li>
</ul>]]></content>
  </entry>
  <entry>
      <title>Parsers and Builders as Prisms</title>
      <link href="https://yairchu.github.io/posts/codecs-as-prisms"/>
      <id>https://yairchu.github.io/posts/codecs-as-prisms</id>
      <updated>2019-12-19T00:00:SZ</updated>
      <category term="code"/>
      <category term="declarative"/>
      <category term="haskell"/>
      <category term="python"/>
      <category term="optics"/>
      <category term="parsing"/>
      <category term="construct"/>
      <summary>Declarative parsing and pretty printing</summary>
      <content type="html"><![CDATA[<p>Serialization and deserialization are tedious tasks, often riddled with boiler-plate and bug-prone code. There's a plethora of tools, such as parser combinator libraries, which aim to assist us in some of these tasks, and it seems that new tools never stop popping up. This hints that there are probably no well known satisfactory solutions to these problems, which probably means that most of these tools are ad-hoc rather than principled high-quality solutions.</p>
<p>Are there no good solutions out there? Actually, there are!</p>
<p>Back when I was programming in Python, I have used <a href="https://construct.readthedocs.io/en/latest/intro.html">Construct</a> to great satisfaction. But for a long time now I have been using Haskell, and have found no equivalent to it, <a href="https://stackoverflow.com/questions/1225053/haskell-equivalent-of-pythons-construct">which I've actually wanted for more than 10 years</a>! So perhaps I should start looking into making one? Hence this post.</p>
<p>In this post we'll introduce Construct's declarative approach and then discuss how to implement an equivalent principled solution in Haskell, based on optics.</p>
<h2 id="construct-declarative-parsers-and-builders">Construct: declarative parsers and builders</h2>
<p>Construct is declarative.</p>
<p>What do I mean by that? A declarative implementation of a parser should describe the format, not how to parse it!</p>
<p>From this description, the computer will automatically figure out how to parse. Not only that, it will also know how to build, and ideally even generate extra artifacts like documentation for the format!</p>
<p>Here's how Construct defines the format of IPv4 packets:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>ipv4 <span class="op">=</span> Struct(</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>    <span class="st">&quot;header&quot;</span> <span class="op">/</span> BitStruct(</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>        <span class="st">&quot;version&quot;</span> <span class="op">/</span> Const(<span class="dv">4</span>, Nibble),</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>        <span class="st">&quot;length&quot;</span> <span class="op">/</span> ExprAdapter(Nibble,</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>            decoder <span class="op">=</span> <span class="kw">lambda</span> obj, ctx: obj <span class="op">*</span> <span class="dv">4</span>,</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>            encoder <span class="op">=</span> <span class="kw">lambda</span> obj, ctx: obj <span class="op">//</span> <span class="dv">4</span>,</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>        ),</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>    ),</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>    ...</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>    <span class="st">&quot;total_length&quot;</span> <span class="op">/</span> Int16ub,</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>    ...</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>    <span class="st">&quot;options&quot;</span> <span class="op">/</span> Bytes(this.header.length <span class="op">-</span> <span class="dv">20</span>),</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a>    <span class="st">&quot;body&quot;</span> <span class="op">/</span> Bytes(this.total_length <span class="op">-</span> this.header.length),</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>)</span></code></pre></div>
<p>In this simple declaration we created a parser, builder, and the data type for IPv4 packets!</p>
<p>Also, I'd like to highlight the richness of the format. It isn't a simple "struct" with fields of known types, but rather a "dependently-typed" one, where the size of the <code>options</code> field depends on the value of <code>header.length</code>! Haskell parser combinators libraries which support such dependencies tend to identify as <a href="http://hackage.haskell.org/package/parsec">"monadic parser combinators" libraries</a>, in constrast to <a href="http://hackage.haskell.org/package/regex-applicative">"applicative parser combinators"</a> which don't support them.</p>
<h2 id="parsers-and-builders-as-prisms">Parsers and builders as prisms</h2>
<p>What is the essence of parsing and building?</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Codec</span> myType encoded <span class="ot">=</span> <span class="dt">Codec</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>    {<span class="ot"> build ::</span> myType <span class="ot">-&gt;</span> encoded</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>    ,<span class="ot"> parse ::</span> encoded <span class="ot">-&gt;</span> <span class="dt">Maybe</span> myType</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>    }</span></code></pre></div>
<p>(Caveat: one may desire meaningful parse errors using <code>Either ParseError</code> rather of <code>Maybe</code>. We'll ignore this issue for now)</p>
<p>Looking for a principled solution, one may notice that this type is equivalent to <a href="https://hackage.haskell.org/package/lens/docs/Control-Lens-Prism.html"><code>Prism</code></a> from the popular <a href="https://hackage.haskell.org/package/lens"><code>lens</code></a> package!</p>
<blockquote>
<p>‘There are only two hard things in Computer Science: cache invalidation and naming things.’ - Phil Karlton</p>
</blockquote>
<p>Naming things is hard, and we want principled approaches and code re-use, so we'll choose to use the existing <code>Prism</code> rather than make an equivalent new ad-hoc type. Hopefully this will also enable enjoying the fruits of the existing <code>lens</code> eco-system.</p>
<p>Let's demonstrate with a simplified IP-like protocol:</p>
<ul>
<li>Word8: The constant 7</li>
<li>Word16: Body length</li>
<li>Word16: Origin address</li>
<li>Word16: Destination address</li>
<li>Body-length bytes: Packet body</li>
</ul>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="op">&gt;</span> simplifiedIp <span class="op">#</span> ((<span class="dv">2</span>, <span class="dv">3</span>), <span class="st">&quot;Hello World!&quot;</span>)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="st">&quot;\a\NUL\f\NUL\STX\NUL\ETXHello World!&quot;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="op">&gt;</span> <span class="st">&quot;\a\NUL\f\NUL\STX\NUL\ETXHello World!&quot;</span> <span class="op">^?</span> simplifiedIp</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="dt">Just</span> ((<span class="dv">2</span>,<span class="dv">3</span>),<span class="st">&quot;Hello World!&quot;</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a><span class="ot">simplifiedIp ::</span> <span class="dt">Prism&#39;</span> <span class="dt">ByteString</span> ((<span class="dt">Word16</span>, <span class="dt">Word16</span>), <span class="dt">ByteString</span>)</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>simplifiedIp <span class="ot">=</span> takeSimplifiedIp <span class="op">.</span> secondOnly <span class="st">&quot;&quot;</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a><span class="ot">takeSimplifiedIp ::</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>    <span class="dt">Prism&#39;</span> <span class="dt">ByteString</span> (((<span class="dt">Word16</span>, <span class="dt">Word16</span>), <span class="dt">ByteString</span>), <span class="dt">ByteString</span>)</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a>takeSimplifiedIp <span class="ot">=</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true"></a>    _Cons <span class="op">.</span> firstOnly <span class="dv">7</span> <span class="op">.</span> <span class="co">-- Remove the constant byte 7</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true"></a>    takeWord16 <span class="op">.</span>          <span class="co">-- (bodyLen, rest)</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true"></a>    aside (takeWord16 <span class="op">.</span> aside takeWord16) <span class="op">.</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true"></a>                          <span class="co">-- (bodyLen, (origin, (dest, rest)))</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true"></a></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true"></a>    <span class="co">-- Reordering (this is somewhat painful):</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true"></a>    aside retuple <span class="op">.</span>       <span class="co">-- (bodyLen, ((origin, dest), rest))</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true"></a>    retuple <span class="op">.</span>             <span class="co">-- ((bodyLen, (origin, dest)), rest)</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true"></a>    asideFirst swapped <span class="op">.</span>  <span class="co">-- (((origin, dest), bodyLen), rest)</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true"></a>    from retuple <span class="op">.</span>        <span class="co">-- ((origin, dest), (bodyLen, rest))</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true"></a></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true"></a>    aside takeBytes <span class="op">.</span>     <span class="co">-- ((origin, dest), (body, remainder))</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true"></a>    retuple               <span class="co">-- (((origin, dest), body), remainder)</span></span></code></pre></div>
<p>This uses some combinators from <code>Control.Lens</code> and some extra combinators defined below:</p>
<h3 id="parse-build-prism-combinators">Parse-build prism combinators</h3>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="ot">firstOnly ::</span> <span class="dt">Eq</span> e <span class="ot">=&gt;</span> e <span class="ot">-&gt;</span> <span class="dt">Prism&#39;</span> (e, a) a</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>firstOnly x <span class="ot">=</span> asideFirst (only x) <span class="op">.</span> iso <span class="fu">snd</span> ((,) ())</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="ot">secondOnly ::</span> <span class="dt">Eq</span> e <span class="ot">=&gt;</span> e <span class="ot">-&gt;</span> <span class="dt">Prism&#39;</span> (a, e) a</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>secondOnly x <span class="ot">=</span> swapped <span class="op">.</span> firstOnly x</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a><span class="ot">asideFirst ::</span> <span class="dt">APrism</span> s t a b <span class="ot">-&gt;</span> <span class="dt">Prism</span> (s, e) (t, e) (a, e) (b, e)</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>asideFirst l <span class="ot">=</span> swapped <span class="op">.</span> aside l <span class="op">.</span> swapped</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a><span class="co">-- Tuple shuffling Iso</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a><span class="ot">retuple ::</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a>    <span class="dt">Iso</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a>    (a0, (a1, a2)) (b0, (b1, b2))</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>    ((a0, a1), a2) ((b0, b1), b2)</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>retuple <span class="ot">=</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true"></a>    iso</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true"></a>    (\(w0, (w1, r)) <span class="ot">-&gt;</span> ((w0, w1), r))</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true"></a>    (\((w0, w1), r) <span class="ot">-&gt;</span> (w0, (w1, r)))</span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true"></a></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true"></a><span class="ot">takeWord16 ::</span> <span class="dt">Prism&#39;</span> <span class="dt">ByteString</span> (<span class="dt">Word16</span>, <span class="dt">ByteString</span>)</span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true"></a>takeWord16 <span class="ot">=</span> _Cons <span class="op">.</span> aside _Cons <span class="op">.</span> retuple <span class="op">.</span> asideFirst (from word16Bytes)</span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true"></a></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true"></a><span class="ot">word16Bytes ::</span> <span class="dt">Iso&#39;</span> <span class="dt">Word16</span> (<span class="dt">Word8</span>, <span class="dt">Word8</span>)</span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true"></a>word16Bytes <span class="ot">=</span></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true"></a>    iso</span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true"></a>    ((both <span class="op">%~</span> <span class="fu">fromIntegral</span>) <span class="op">.</span> (<span class="ot">`divMod`</span> <span class="dv">256</span>))</span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true"></a>    (\(w1, w0) <span class="ot">-&gt;</span> <span class="fu">fromIntegral</span> w1 <span class="op">*</span> <span class="dv">256</span> <span class="op">+</span> <span class="fu">fromIntegral</span> w0)</span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true"></a></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true"></a><span class="ot">takeBytes ::</span></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true"></a>    <span class="dt">Integral</span> a <span class="ot">=&gt;</span></span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true"></a>    <span class="dt">Prism&#39;</span> (a, <span class="dt">ByteString</span>) (<span class="dt">ByteString</span>, <span class="dt">ByteString</span>)</span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true"></a>takeBytes <span class="ot">=</span></span>
<span id="cb4-33"><a href="#cb4-33" aria-hidden="true"></a>    prism&#39;</span>
<span id="cb4-34"><a href="#cb4-34" aria-hidden="true"></a>    ( \(x, y) <span class="ot">-&gt;</span></span>
<span id="cb4-35"><a href="#cb4-35" aria-hidden="true"></a>        (<span class="fu">fromIntegral</span> (<span class="dt">ByteString</span><span class="op">.</span><span class="fu">length</span> x), x <span class="op">&lt;&gt;</span> y))</span>
<span id="cb4-36"><a href="#cb4-36" aria-hidden="true"></a>    (\(count, x) <span class="ot">-&gt;</span></span>
<span id="cb4-37"><a href="#cb4-37" aria-hidden="true"></a>        <span class="dt">ByteString</span><span class="op">.</span><span class="fu">splitAt</span> (<span class="fu">fromIntegral</span> count) x <span class="op">&lt;$</span></span>
<span id="cb4-38"><a href="#cb4-38" aria-hidden="true"></a>        guard (<span class="fu">fromIntegral</span> count <span class="op">&lt;=</span> <span class="dt">ByteString</span><span class="op">.</span><span class="fu">length</span> x))</span></code></pre></div>
<h2 id="conclusion">Conclusion</h2>
<p>We've succesfully crafted prisms to parse and build our structure!</p>
<p>Now let's review some drawbacks of the presented approach:</p>
<ul>
<li>We used anonymous tuples where Construct uses named fields
<ul>
<li>Using tuples isn't so type-safe nor is it descriptive</li>
<li>Reordering our tuples to fit the combinators was painful</li>
<li>To do what Construct does, we would need structural records, where we can add fields to the structure one at a time (note that this may be possible using a package such as <a href="https://hackage.haskell.org/package/vinyl-0.12.0/docs/Data-Vinyl-Tutorial-Overview.html">vinyl</a>?)</li>
</ul></li>
<li>Our parsers don't perform error reporting
<ul>
<li>When writing parsers for programming languages this is quite crucial! (Imagine getting a syntax error with the compiler not even pointing out what line it's at)</li>
</ul></li>
</ul>
<p>I believe that both of these problems can be solved, resulting in a powerful and ergonomic principled solution. In my next post I'll describe an approach to add error reporting to our prisms.</p>
<p>Notes:</p>
<ul>
<li><a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2004/01/picklercombinators.pdf">AJ. Kennedy's "Pickler Combinators" paper (JFP 2004)</a> described parsing+building combinators in Haskell using a custom data type (not using prisms) and demonstrated some more useful combinators for parsing</li>
<li>Apparently T. Filiba, the author of Construct, <a href="http://tomerfiliba.com/blog/ConstructPlusPlus/">has attempted re-implementing it in Haskell in 2014</a>, but gave up</li>
<li>Image credit: <a href="https://commons.wikimedia.org/wiki/File:Dispersive_prism.png">Kelvinsong [CC0]</a></li>
</ul>
<p>Discussion:</p>
<ul>
<li><img src="/images/twitter-logo.png" alt="twitter" style="width: 20px; display: inline;"/> <a href="https://twitter.com/yairchu/status/1207947943552192512">Twitter</a></li>
<li><img src="/images/reddit.svg" alt="reddit" style="width: 20px; display: inline;"/> <a href="https://www.reddit.com/r/haskell/comments/ed7k24/parsers_and_builders_as_prisms/">r/haskell</a></li>
</ul>]]></content>
  </entry>
  <entry>
      <title>Why does your programming language have five command line tools?</title>
      <link href="https://yairchu.github.io/posts/the-five-tools"/>
      <id>https://yairchu.github.io/posts/the-five-tools</id>
      <updated>2019-11-07T00:00:SZ</updated>
      <category term="code"/>
      <category term="haskell"/>
      <category term="python"/>
      <category term="c++"/>
      <category term="rust"/>
      <category term="stack"/>
      <summary>Why do programming languages have so many build tools</summary>
      <content type="html"><![CDATA[<p>Whichever programming language you use, its eco-system probably consists of a plethora of confusing command line tools which you might have needed to use to actually make software with it.</p>
<h2 id="compiling-your-program">Compiling your program</h2>
<p>You need something to compile or interpret your program. In Haskell this is <code>ghc</code>, in Python it's <code>python</code>. In C++ it's <del><code>gcc</code></del> <del><code>clang</code></del> your IDE.</p>
<h2 id="compiling-a-program-which-consists-of-several-modules">Compiling a program which consists of several modules</h2>
<p>In some languages, the compiler only compiles a single source file. If we split our code to several modules, we need a tool to run the compiler for each one. In Haskell that's <code>cabal</code> (and later also <code>ghc --make</code>), in Python it was always baked in to the interpreter. In C++ this is the reason you just use an IDE.</p>
<h2 id="package-manager">Package manager</h2>
<p>You want to use libraries. In the old days folks downloaded installers or source packages from the internet and executed their install scripts, but the current trend is to invoke the package manager which magically installs a package along with its transitive dependencies for you.</p>
<p>In Haskell that's <code>cabal-install</code>. In Python it was <code>easy_install</code> and nowadays it seems to be <code>pip</code>. In C++ you simply try to avoid using libraries.</p>
<h3 id="the-package-manager-fallacy">The package manager fallacy</h3>
<p>A problem with this paradigm arises when you work on two projects which depend on different versions of the same library. This is a conflict!</p>
<p>The problem is even more subtle as versions of the transitive dependencies may occasionally matter too.</p>
<p>This is the reason that we need even more tools.</p>
<h3 id="the-sandbox">The "Sandbox"</h3>
<p>This tool allows different projects to use distinct versions of libraries. In Haskell this is <code>cabal-v2</code>, in Python it was <code>virtualenv</code> and nowaday it seems to be <code>venv</code>.</p>
<h3 id="the-libraries-sandbox-fallacy">The Libraries Sandbox fallacy</h3>
<p>The libraries aren't all of the dependencies. The specific version of the programming language's compiler/interpreter itself also tends to matter quite a lot!</p>
<p>This is the reason that we need even more tools.</p>
<h2 id="reproducible-build">Reproducible Build</h2>
<p><img src="/images/turtles-all-the-way-down.jpg" alt="Turtles all the way down" /></p>
<p>You also want to be able to express which exact version of your compiler/etc you are using, and have your tool do all the rest (get this compiler version, your dependencies, and build your program for you).</p>
<p>You want the definitions to be stored in your source repository so that you could easily go and build the old versions of your project just like you did when you implemented them.</p>
<p>In Haskell the tool for this is generally <code>stack</code> (which actually existed before <code>cabal-v2</code>) or <code>nix</code>. In Python folks keep several toolset installations (i.e <code>python2</code> and <code>python3</code>) and manually invoke the right one. In C++ to build your old code you keep around an old computer.</p>
<p>In a perfect world the "reproducible build" tool should be the only tool you need.</p>
<p>The existence of the previous partial solutions is an awkward artifact of history which represents the order of iterative discovery and partial solutions to this problem space.</p>
<h3 id="points-for-rust">Points for Rust</h3>
<p><img src="/images/dab-emoji.jpg" alt="Dab Emoji" style="width: 150px;"/></p>
<p>Hindsight is 20/20.</p>
<p>Unlike Python, Haskell, and other languages which each developed their five tools, Rust, a new-comer modern programming language skipped this baggage and does offer a single reproducible build tool to rule them all - <code>cargo</code>.</p>
<h2 id="is-that-all">Is that all</h2>
<p><img src="/images/yo-dawg-tool-to-get-tools.jpg" alt="Yo dawg" /></p>
<p>Is that all? Or do we also need a tool to specify the exact version of our reproducible build tool?</p>
<p>In a perfect world you wouldn't need that, but unfortunately the world is not perfect. Haskell's <code>stack</code>'s new versions don't support some features of the definition files (<code>stack.yaml</code>) of its older versions and vice versa. To solve this problem without an additional layer the reproducible build tool must be solid. It has to be backwards compatible with its older versions and also not have any weird behaviors (a bug-feature) that people rely on. Otherwise we'd need to keep piling layers.</p>
<p>Image sources:</p>
<ul>
<li><a href="https://imgur.com/gallery/BwYFH0F">Duct-tape car</a></li>
<li><a href="https://en.wikipedia.org/wiki/Turtles_all_the_way_down#/media/File:River_terrapin.jpg">Turtles</a></li>
<li><a href="https://www.change.org/p/apple-add-the-dab-emoji-to-ios">Dab Emoji</a></li>
</ul>]]></content>
  </entry>
  <entry>
      <title>The four simple ways to encode sum-types</title>
      <link href="https://yairchu.github.io/posts/sum-type-encodings"/>
      <id>https://yairchu.github.io/posts/sum-type-encodings</id>
      <updated>2019-11-06T00:00:SZ</updated>
      <category term="code"/>
      <category term="expr-problem"/>
      <category term="sum-types"/>
      <category term="haskell"/>
      <category term="default-sigs"/>
      <summary>How and why to encode sum types?</summary>
      <content type="html"><![CDATA[<p>There are four simple ways to encode sum types:</p>
<ul>
<li>Directly, if your programming language supports them</li>
<li>"Church encoding"</li>
<li>"Final style"</li>
<li>The OO pattern</li>
</ul>
<p>We'll introduce them and discuss their pros and cons, focusing on open (extensible) sum-types.</p>
<h2 id="direct">Direct</h2>
<p>All the up and coming programming languages support sum types, by feature if not by name:</p>
<table>
<thead>
<tr class="header">
<th style="text-align: right;">Language</th>
<th style="text-align: left;">Feature</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">F#</td>
<td style="text-align: left;"><a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/discriminated-unions">Discriminated Unions</a></td>
</tr>
<tr class="even">
<td style="text-align: right;">Elm</td>
<td style="text-align: left;"><a href="https://guide.elm-lang.org/types/custom_types.html">Variants</a></td>
</tr>
<tr class="odd">
<td style="text-align: right;">Rust</td>
<td style="text-align: left;"><a href="https://doc.rust-lang.org/book/ch06-00-enums.html">Enumerations</a></td>
</tr>
<tr class="even">
<td style="text-align: right;">Swift</td>
<td style="text-align: left;"><a href="https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html">Enumerations</a></td>
</tr>
<tr class="odd">
<td style="text-align: right;">Kotlin</td>
<td style="text-align: left;"><a href="https://kotlinlang.org/docs/reference/sealed-classes.html">Sealed Classes</a></td>
</tr>
<tr class="even">
<td style="text-align: right;">Haskell</td>
<td style="text-align: left;"><a href="https://wiki.haskell.org/Algebraic_data_type">Algebraic Data Types</a></td>
</tr>
</tbody>
</table>
<p>We'll use Haskell to demonstrate them:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Shape</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>    <span class="ot">=</span> <span class="dt">Rect</span> {<span class="ot"> width ::</span> <span class="dt">Float</span>,<span class="ot"> height ::</span> <span class="dt">Float</span> }</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">Circle</span> {<span class="ot"> radius ::</span> <span class="dt">Float</span> }</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="ot">area ::</span> <span class="dt">Shape</span> <span class="ot">-&gt;</span> <span class="dt">Float</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>area (<span class="dt">Rect</span> w h) <span class="ot">=</span> w <span class="op">*</span> h</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>area (<span class="dt">Circle</span> r) <span class="ot">=</span> <span class="fu">pi</span> <span class="op">*</span> r <span class="op">*</span> r</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a><span class="op">&gt;</span> area (<span class="dt">Rect</span> <span class="dv">3</span> <span class="dv">5</span>)</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a><span class="dv">15</span></span></code></pre></div>
<h2 id="church-encoding">Church encoding</h2>
<p>How would we encode our type in legacy languages which don't support sum types?</p>
<p>Famous minimalist <a href="https://en.wikipedia.org/wiki/Alonzo_Church">Alonzo Church</a> has devised a method:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ot">{-# LANGUAGE RankNTypes #-}</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">ShapeHandlers</span> r <span class="ot">=</span> <span class="dt">ShapeHandlers</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>    {<span class="ot"> handleRect ::</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> r</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>    ,<span class="ot"> handleCircle ::</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> r</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>    }</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Shape</span> <span class="ot">=</span> (<span class="kw">forall</span> a<span class="op">.</span> <span class="dt">ShapeHandlers</span> a <span class="ot">-&gt;</span> a)</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a><span class="ot">rect ::</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Shape</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>rect w h handlers <span class="ot">=</span> handleRect handlers w h</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a><span class="ot">circle ::</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Shape</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a>circle r handlers <span class="ot">=</span> handleCircle handlers r</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a><span class="ot">area ::</span> <span class="dt">Shape</span> <span class="ot">-&gt;</span> <span class="dt">Float</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true"></a>area shape <span class="ot">=</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true"></a>    shape</span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true"></a>    <span class="dt">ShapeHandlers</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true"></a>    { handleRect <span class="ot">=</span> \w h <span class="ot">-&gt;</span> w <span class="op">*</span> h</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true"></a>    , handleCircle <span class="ot">=</span> \r <span class="ot">-&gt;</span> <span class="fu">pi</span> <span class="op">*</span> r <span class="op">*</span> r</span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true"></a>    }</span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true"></a></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true"></a><span class="op">&gt;</span> area (rect <span class="dv">3</span> <span class="dv">5</span>)</span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true"></a><span class="dv">15</span></span></code></pre></div>
<p>While originally intended for use in his minimal programming language "Lambda Calculus", this encoding is suitable for most popular languages. Java/C# supports it via abstract generic methods. In C++ or Go we'll have to resort to casts or side-effects to encode this (the <a href="https://en.wikipedia.org/wiki/Visitor_pattern">Visitor pattern</a>).</p>
<h2 id="final-style-extending-church-encodings-using-type-classes">Final style: Extending church-encodings using type classes</h2>
<p>We can encode the record from the church encoding using a type-class:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ot">{-# LANGUAGE RankNTypes #-}</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">ShapeHandlers</span> r <span class="kw">where</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="ot">    rect ::</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> r</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="ot">    circle ::</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> r</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Shape</span> <span class="ot">=</span> (<span class="kw">forall</span> a<span class="op">.</span> <span class="dt">ShapeHandlers</span> a <span class="ot">=&gt;</span> a)</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a><span class="kw">newtype</span> <span class="dt">Area</span> <span class="ot">=</span> <span class="dt">Area</span> {<span class="ot"> area ::</span> <span class="dt">Float</span> }</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">ShapeHandlers</span> <span class="dt">Area</span> <span class="kw">where</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a>    rect w h <span class="ot">=</span> <span class="dt">Area</span> (w <span class="op">*</span> h)</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true"></a>    circle r <span class="ot">=</span> <span class="dt">Area</span> (<span class="fu">pi</span> <span class="op">*</span> r <span class="op">*</span> r)</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true"></a></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true"></a><span class="op">&gt;</span> area (rect <span class="dv">3</span> <span class="dv">5</span>)</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true"></a><span class="dv">15</span></span></code></pre></div>
<p>The main benefit of using this encoding is that type class constraints are trivially composable, which translates to encoding extensible sum-types! For example: <code>(forall a. (ShapeHandlers a, MoreHandlers a) =&gt; a)</code></p>
<p>With a small modification (avoiding universal quantification) this becomes Carette et al's <a href="http://okmij.org/ftp/tagless-final/index.html">"Final Style"</a>, which is also commonly known as "<code>mtl</code> style".</p>
<p>A similar encoding in OO languages, using interfaces instead of type classes is Oliviera et al's <a href="https://www.cs.utexas.edu/~wcook/Drafts/2012/ecoop2012.pdf">"Object Algebras"</a>.</p>
<h2 id="the-oo-pattern">The OO pattern</h2>
<p>This is a common way to represent sum types in object oriented languages:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Rect</span> <span class="ot">=</span> <span class="dt">Rect</span> {<span class="ot"> width ::</span> <span class="dt">Float</span>,<span class="ot"> height ::</span> <span class="dt">Float</span> }</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Circle</span> <span class="ot">=</span> <span class="dt">Circle</span> {<span class="ot"> radius ::</span> <span class="dt">Float</span> }</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Area</span> a <span class="kw">where</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a><span class="ot">    area ::</span> a <span class="ot">-&gt;</span> <span class="dt">Float</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Area</span> <span class="dt">Rect</span> <span class="kw">where</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>    area (<span class="dt">Rect</span> w h) <span class="ot">=</span> w <span class="op">*</span> h</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Area</span> <span class="dt">Circle</span> <span class="kw">where</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a>    area (<span class="dt">Circle</span> r) <span class="ot">=</span> <span class="fu">pi</span> <span class="op">*</span> r <span class="op">*</span> r</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a><span class="op">&gt;</span> area (<span class="dt">Rect</span> <span class="dv">3</span> <span class="dv">5</span>)</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a><span class="dv">15</span></span></code></pre></div>
<p>This encoding is naturally open! We can add shapes as we please, and in posh languages which support type-classes or traits we can also add more operations on them without modifying existing code.</p>
<h2 id="putting-these-approaches-to-the-test">Putting these approaches to the test</h2>
<p>Let's explore how these approaches fare against some simple challenges.</p>
<h3 id="supporting-new-shapes">Supporting new shapes</h3>
<p>Suppose we wanted to write code that can support more types of shapes, without modifying our shape data definition (aka the <a href="https://en.wikipedia.org/wiki/Expression_problem">Expression problem</a>).</p>
<p>The direct sum-type can't be extended, nor can its church encoding. But the final and OO styles can.</p>
<p>Final style:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">CompositeHandler</span> r <span class="kw">where</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="ot">    composite ::</span> r <span class="ot">-&gt;</span> r <span class="ot">-&gt;</span> r</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">CompositeHandler</span> <span class="dt">Area</span> <span class="kw">where</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>    composite (<span class="dt">Area</span> x) (<span class="dt">Area</span> y) <span class="ot">=</span> <span class="dt">Area</span> (x <span class="op">+</span> y)</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a><span class="op">&gt;</span> area (composite (rect <span class="dv">3</span> <span class="dv">5</span>) (circle <span class="dv">1</span>))</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a><span class="fl">18.141592</span></span></code></pre></div>
<p>OO style:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Composite</span> a b <span class="ot">=</span> <span class="dt">Composite</span> {<span class="ot"> first ::</span> a,<span class="ot"> second ::</span> b }</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="kw">instance</span> (<span class="dt">Area</span> a, <span class="dt">Area</span> b) <span class="ot">=&gt;</span> <span class="dt">Area</span> (<span class="dt">Composite</span> a b) <span class="kw">where</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>    area (<span class="dt">Composite</span> x y) <span class="ot">=</span> area x <span class="op">+</span> area y</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a><span class="op">&gt;</span> area (<span class="dt">Composite</span> (<span class="dt">Rect</span> <span class="dv">3</span> <span class="dv">5</span>) (<span class="dt">Circle</span> <span class="dv">1</span>))</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a><span class="fl">18.141592</span></span></code></pre></div>
<h3 id="collections">Collections</h3>
<p>If we wanted to encode a list of shapes:</p>
<ul>
<li>A final style list, <code>[(forall a. (ShapeHandlers a, CompositeHandler a) =&gt; a)]</code>, uses a universal quantifier and closes the list of supported variants</li>
<li>An OO style list will have to use an existensial quantifier and close the list of supported operations</li>
</ul>
<h3 id="operations-on-more-than-one-value">Operations on more than one value</h3>
<p>The <code>area</code> operation discussed earlier converts a given value to a result. But what if we wanted an operation that processes two shapes, like generating a diff of them?</p>
<p>This is where all styles discussed above fall short as far as I'm aware.</p>
<h2 id="the-fifth-approach-composition-of-atoms">The fifth approach: Composition of atoms</h2>
<p>All the approaches discussed above failed when put to the test. The following approach fares better -</p>
<p>We build upon the OO approach's basic shapes and combine them into a concrete <code>Shape</code> sum type:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="ot">{-# LANGUAGE DeriveGeneric, DeriveAnyClass #-}</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Shape</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>    <span class="ot">=</span> <span class="dt">SRect</span> <span class="dt">Rect</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">SCircle</span> <span class="dt">Circle</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a>    <span class="kw">deriving</span> (<span class="dt">Generic</span>, <span class="dt">Area</span>)</span></code></pre></div>
<p>We use <code>Generic</code> and <code>DefaultSignatures</code> based derivations to derive our class instances (the derivation of <code>Area</code> is left as an exercise for the reader).</p>
<p>This approach allows us to implement our basic types, operations, and instances in a modular way, while only closing the type at the top-level. It does allow us to implement operations on more than one value (such as diffs), and we can encode a list in either of the styles supported by Final or OO styles.</p>
<p>Discussion:</p>
<ul>
<li><img src="/images/reddit.svg" alt="reddit" style="width: 20px; display: inline;"/> <a href="https://www.reddit.com/r/haskell/comments/dsgr0r/the_four_simple_ways_to_encode_sumtypes/">r/haskell</a></li>
</ul>
<p>(image credit: <a href="https://commons.wikimedia.org/wiki/File:Loc_Bloc_example_1_of_Disney.JPG">MissMarvel50sWorld</a>)</p>]]></content>
  </entry>
  <entry>
      <title>Nicer Data Types a la Carte with DefaultSignatures</title>
      <link href="https://yairchu.github.io/posts/dtalc-with-defaultsigs"/>
      <id>https://yairchu.github.io/posts/dtalc-with-defaultsigs</id>
      <updated>2019-10-02T00:00:SZ</updated>
      <category term="code"/>
      <category term="expr-problem"/>
      <category term="haskell"/>
      <category term="default-sigs"/>
      <summary>On using DefaultSignatures to improve DTALC</summary>
      <content type="html"><![CDATA[<p>Back in 2008, Swierstra's Functional Pearl <a href="http://www.cs.ru.nl/~W.Swierstra/Publications/DataTypesALaCarte.pdf"><em>Data Types a la Carte</em></a> showed how to construct the following data structure:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Expr</span> <span class="ot">=</span> <span class="dt">Val</span> <span class="dt">Int</span> <span class="op">|</span> <span class="dt">Add</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span></code></pre></div>
<p>from simple and re-usable individual components:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">newtype</span> <span class="dt">Val</span> e <span class="ot">=</span> <span class="dt">Val</span> <span class="dt">Int</span> <span class="kw">deriving</span> <span class="dt">Functor</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="kw">data</span>    <span class="dt">Add</span> e <span class="ot">=</span> <span class="dt">Add</span> e e <span class="kw">deriving</span> <span class="dt">Functor</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Expr</span> <span class="ot">=</span> <span class="dt">Fix</span> (<span class="dt">Val</span> <span class="op">:+:</span> <span class="dt">Add</span>)</span></code></pre></div>
<p>(<a href="http://hackage.haskell.org/package/recursion-schemes/docs/Data-Functor-Foldable.html#t:Fix"><code>Fix</code></a> is available in the <a href="http://hackage.haskell.org/package/recursion-schemes"><code>recursion-schemes</code></a> package and <a href="http://hackage.haskell.org/package/base-4.12.0.0/docs/GHC-Generics.html#t::-43-:"><code>:+:</code></a> is available from <code>GHC.Generics</code>)</p>
<h2 id="the-good">The Good</h2>
<p>This construction allows to write clean and re-usable modular code. For example we can implement evaluation of expressions like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> <span class="dt">Eval</span> f <span class="kw">where</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="ot">    evalAlgebra ::</span> f <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>eval (<span class="dt">Fix</span> expr) <span class="ot">=</span> evalAlgebra (<span class="fu">fmap</span> eval expr)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a><span class="kw">instance</span> (<span class="dt">Eval</span> f, <span class="dt">Eval</span> g) <span class="ot">=&gt;</span> <span class="dt">Eval</span> (f <span class="op">:+:</span> g) <span class="kw">where</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>    evalAlgebra (<span class="dt">L1</span> x) <span class="ot">=</span> evalAlgebra x</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>    evalAlgebra (<span class="dt">R1</span> y) <span class="ot">=</span> evalAlgebra y</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Eval</span> <span class="dt">Val</span> <span class="kw">where</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>    evalAlgebra (<span class="dt">Val</span> x) <span class="ot">=</span> x</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Eval</span> <span class="dt">Add</span> <span class="kw">where</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true"></a>    evalAlgebra (<span class="dt">Add</span> x y) <span class="ot">=</span> x <span class="op">+</span> y</span></code></pre></div>
<p>The beautiful part, which makes this a functional pearl, is that the <code>Eval</code> instances of <code>Val</code> and <code>Add</code> are usable not just for the <code>Expr</code> type defined above, but also for any other expression language which re-uses them, such as:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Expr2</span> <span class="ot">=</span> <span class="dt">Fix</span> (<span class="dt">Val</span> <span class="op">:+:</span> <span class="dt">Add</span> <span class="op">:+:</span> <span class="dt">Mul</span> <span class="op">:+:</span> <span class="dt">Pow</span> <span class="op">:+:</span> <span class="dt">Etc</span>)</span></code></pre></div>
<h2 id="the-ugly">The Ugly</h2>
<p>How would we represent an expression, such as <code>1 + 2</code> in the type defined above?</p>
<p>The simple way to do it is <code>Fix (R1 (Fix (L1 (Val 1)) `Add` Fix (L1 (Val 2))))</code>.</p>
<p>The usages of <code>Fix</code>, <code>R1</code> and <code>L1</code> are cumbersome, so to make things easier Swiestra showed how to write the expression as <code>val 1 `add` val 2</code> using an additional type-class and lifting functions per constructor. This makes writing terms convinient, but a few problems remain unsolved:</p>
<ul>
<li>For expression types with many possible constructors, we pay a performance penalty for this representation, when compared to a single "flat expression algebra"</li>
<li><code>Expr</code>'s <code>Show</code> is very cumbersome</li>
</ul>
<h3 id="bringing-the-benefits-of-data-types-a-la-carte-to-simpler-representations">Bringing the benefits of Data Types a la Carte to simpler representations</h3>
<p>A few years after the paper, in 2011, <code>DefaultSignatures</code> <a href="https://downloads.haskell.org/~ghc/7.2.1/docs/html/users_guide/release-7-2-1.html">were added in GHC 7.2</a>. These enable a more direct construction of <code>Expr</code>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Expr</span> a <span class="ot">=</span> <span class="dt">EVal</span> (<span class="dt">Val</span> a) <span class="op">|</span> <span class="dt">EAdd</span> (<span class="dt">Add</span> a)</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>    <span class="kw">deriving</span> (<span class="dt">Generic1</span>, <span class="dt">Functor</span>, <span class="dt">Eval</span>)</span></code></pre></div>
<p>Of note here is the derivation of <code>Eval</code> (using <code>DeriveAnyClass</code>). Making <code>Eval</code> derivable is a simple matter of adding default method implementations in the <code>Eval</code> class along with two trivial instances for types from <code>GHC.Generics</code>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> <span class="dt">Eval</span> f <span class="kw">where</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="ot">    evalAlgebra ::</span> f <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>    default<span class="ot"> evalAlgebra ::</span> (<span class="dt">Generic1</span> f, <span class="dt">Eval</span> (<span class="dt">Rep1</span> f)) <span class="ot">=&gt;</span> f <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>    evalAlgebra <span class="ot">=</span> evalAlgebra <span class="op">.</span> from1</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a><span class="kw">deriving</span> <span class="kw">newtype</span> <span class="kw">instance</span> <span class="dt">Eval</span> f <span class="ot">=&gt;</span> <span class="dt">Eval</span> (<span class="dt">M1</span> i c f)</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a><span class="kw">deriving</span> <span class="kw">newtype</span> <span class="kw">instance</span> <span class="dt">Eval</span> f <span class="ot">=&gt;</span> <span class="dt">Eval</span> (<span class="dt">Rec1</span> f)</span></code></pre></div>
<p>This gives us a few benefits:</p>
<ul>
<li>No performance penalty when we have many constructors</li>
<li>Chains of <code>L1</code> and <code>R1</code> are replaced with a single constructor with a suitable name, so <code>Show</code> is slightly more sensible and we can write a term by hand without checking for the order of the constructors</li>
</ul>
<h2 id="the-bad">The Bad</h2>
<p>While Data Types a la Carte allows us to re-use individual components such as <code>Val</code> and <code>Add</code> in expression types, those are limited to be simple recursive types.</p>
<p><img src="/images/haskell-ast.svg" alt="Haskell&#39;s AST" /></p>
<p>In practice, programming language ASTs tend to consist of multiple mutually-recursive types, and Data Types a la Carte's approach can't help us express those. I'll expand <a href="https://github.com/lamdu/hypertypes">on how to extend its approach for more complicated ASTs</a> in a future post.</p>
<p>Discussion:</p>
<ul>
<li><img src="/images/reddit.svg" alt="reddit" style="width: 20px; display: inline;"/> <a href="https://www.reddit.com/r/haskell/comments/dcpi4n/nicer_data_types_a_la_carte_with_defaultsignatures/">r/haskell</a></li>
</ul>]]></content>
  </entry>
  <entry>
      <title>How git-mediate made me stop fearing merge conflicts!</title>
      <link href="https://yairchu.github.io/posts/git-mediate-stops-fear"/>
      <id>https://yairchu.github.io/posts/git-mediate-stops-fear</id>
      <updated>2016-12-28T00:00:SZ</updated>
      <category term="code"/>
      <category term="git"/>
      <category term="merge"/>
      <summary>Quick intro to git-mediate</summary>
      <content type="html"><![CDATA[<p>If you’ve ever had to deal with git merge conflicts, then there’s a good chance that these messages give you the chills:</p>
<pre><code>Auto-merging &lt;SOURCE-FILE-PATH&gt;
CONFLICT (content): Merge conflict in &lt;SOURCE-FILE-PATH&gt;
Automatic merge failed; fix conflicts and then commit the result.</code></pre>
<p>They arise when performing merges, reverts, and cherry-picks, and they scare people away and make them reconsider their actions.</p>
<p><img src="/images/kdiff3.png" alt="git mergetool --tool=kdiff3" /></p>
<p>Solving these conflicts <a href="http://stackoverflow.com/questions/161813/how-to-resolve-merge-conflicts-in-git">was hard</a>, time consuming and very error-prone, using either fancy 3-way GUI merge tools or doing it manually (did I mention error prone?).</p>
<p><img src="/images/mine-sweeper-losing.jpeg" alt="When resolving conflicts we have to be careful, do it correctly, and avoid introducing bugs" /></p>
<p>Then I learned about <a href="https://github.com/Peaker/git-mediate">git-mediate</a>, a small open-source tool by Eyal Lotem, which helps resolve merge conflicts rather easily, and most important, <strong>correctly</strong>!</p>
<p>How does it work?</p>
<p>First, configure git to use its “diff3” merge conflict style:</p>
<pre><code>git config --global merge.conflictstyle diff3</code></pre>
<p>Now when conflicts appear, they look like this in the affected files:</p>
<p><img src="/images/diff3-style.jpeg" alt="An unresolved git merge conflict" /></p>
<p>When a conflict occurs, look at it and try to figure out what changed between the base and either the upper or lower branch — choose whichever looks like a simpler change. Now apply this change on the two other parts that don’t yet have it: both the base and the other branch. After your edits, the conflict <em>should</em> look like this:</p>
<p><img src="/images/diff3-resolved.jpeg" alt="Mouth added to both HEAD and base chunks" /></p>
<p>Now we run git-mediate which rewrites the file with one where the conflict is resolved and <code>git add</code>s it if no conflicts remain.</p>
<p>How does it work? It notices that for this conflict one of the branches matches the base, and replaces the conflict with the <em>other</em> branch, which now contains <strong>both changes</strong>.</p>
<p>If git-mediate finds that, after our changes, neither branch is identical to the base, it means that we missed parts of the change. That often happens and it’s ok. We just have to see what we missed, which is easier now that the branch is more similar to the new base, and apply that on the other two parts. We can then run git-mediate again and have our conflicts resolved.</p>
<p>Had we tried to resolve the conflict manually (without git-mediate) we could have easily missed whether we didn’t apply the full change, and in doing so accidentally revert changes in our conflict resolution. By using git-mediate to verify our work and resolve the conflict for us, we avoid such mistakes.</p>
<p>Using git-mediate is a bit like magic, you do a small little change, press the button, and your conflict is resolved!</p>
<p>A few extra tips:</p>
<ul>
<li>Regardless of your merging solution, large merges can often be split into several smaller ones, for example by rebasing feature-branches instead of doing one big merge.</li>
<li>When figuring out the changes in a conflict isn’t simple, <code>git-mediate -d</code> shows, in diff form, the two different changes from the base.</li>
</ul>
<p>Happy merging!</p>
<p>Discussion:</p>
<ul>
<li><img src="/images/Medium_logo_Monogram.svg" alt="medium" style="width: 20px; display: inline;"/> This post was originally <a href="https://medium.com/@yairchu/how-git-mediate-made-me-stop-fearing-merge-conflicts-and-start-treating-them-like-an-easy-game-of-a2c71b919984">posted on Medium</a>. It was migrated to my new blog at 2020.04.21</li>
<li><img src="/images/reddit.svg" alt="reddit" style="width: 20px; display: inline;"/> <a href="https://www.reddit.com/r/git/comments/5kwrnm/how_gitmediate_made_me_stop_fearing_merge/">r/git</a></li>
</ul>]]></content>
  </entry>
</feed>
